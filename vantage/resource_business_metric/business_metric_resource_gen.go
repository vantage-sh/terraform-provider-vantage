// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_business_metric

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func BusinessMetricResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cloudwatch_fields": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"dimensions": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Optional: true,
									Computed: true,
								},
								"value": schema.StringAttribute{
									Optional: true,
									Computed: true,
								},
							},
							CustomType: DimensionsType{
								ObjectType: types.ObjectType{
									AttrTypes: DimensionsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "The dimensions used to pull specific statistical data for Cloudwatch metrics.",
						MarkdownDescription: "The dimensions used to pull specific statistical data for Cloudwatch metrics.",
					},
					"integration_token": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Integration token for the account from which you would like to fetch metrics.",
						MarkdownDescription: "Integration token for the account from which you would like to fetch metrics.",
					},
					"label_dimension": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The dimension used to aggregate the Cloudwatch metrics.",
						MarkdownDescription: "The dimension used to aggregate the Cloudwatch metrics.",
					},
					"metric_name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The metric name used to import Cloudwatch metrics.",
						MarkdownDescription: "The metric name used to import Cloudwatch metrics.",
					},
					"namespace": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The namespace used to import Cloudwatch metrics.",
						MarkdownDescription: "The namespace used to import Cloudwatch metrics.",
					},
					"region": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The region used to import Cloudwatch metrics.",
						MarkdownDescription: "The region used to import Cloudwatch metrics.",
					},
					"stat": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The time aggregation function used to import Cloudwatch metrics.",
						MarkdownDescription: "The time aggregation function used to import Cloudwatch metrics.",
					},
				},
				CustomType: CloudwatchFieldsType{
					ObjectType: types.ObjectType{
						AttrTypes: CloudwatchFieldsValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Cloudwatch configuration fields.",
				MarkdownDescription: "Cloudwatch configuration fields.",
			},
			"cost_report_tokens_with_metadata": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cost_report_token": schema.StringAttribute{
							Required:            true,
							Description:         "The token of the CostReport the BusinessMetric is attached to.",
							MarkdownDescription: "The token of the CostReport the BusinessMetric is attached to.",
						},
						"label_filter": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "Include only values with these labels in the CostReport.",
							MarkdownDescription: "Include only values with these labels in the CostReport.",
						},
						"unit_scale": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Determines the scale of the BusinessMetric's values within the CostReport.",
							MarkdownDescription: "Determines the scale of the BusinessMetric's values within the CostReport.",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"per_unit",
									"per_hundred",
									"per_thousand",
									"per_million",
									"per_billion",
								),
							},
							Default: stringdefault.StaticString("per_unit"),
						},
					},
					CustomType: CostReportTokensWithMetadataType{
						ObjectType: types.ObjectType{
							AttrTypes: CostReportTokensWithMetadataValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.",
				MarkdownDescription: "The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.",
			},
			"created_by_token": schema.StringAttribute{
				Computed:            true,
				Description:         "The token of the Creator of the BusinessMetric.",
				MarkdownDescription: "The token of the Creator of the BusinessMetric.",
			},
			"datadog_metric_fields": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"integration_token": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Integration token for the account from which you would like to fetch metrics.",
						MarkdownDescription: "Integration token for the account from which you would like to fetch metrics.",
					},
					"query": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Datadog metrics query string. e.g. sum:aws.applicationelb.request_count{region:us-east-1}.rollup(avg,daily)",
						MarkdownDescription: "Datadog metrics query string. e.g. sum:aws.applicationelb.request_count{region:us-east-1}.rollup(avg,daily)",
					},
				},
				CustomType: DatadogMetricFieldsType{
					ObjectType: types.ObjectType{
						AttrTypes: DatadogMetricFieldsValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Datadog metric configuration fields",
				MarkdownDescription: "Datadog metric configuration fields",
			},
			"import_type": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of import for the BusinessMetric.",
				MarkdownDescription: "The type of import for the BusinessMetric.",
			},
			"integration_token": schema.StringAttribute{
				Computed:            true,
				Description:         "The Integration token used to import the BusinessMetric.",
				MarkdownDescription: "The Integration token used to import the BusinessMetric.",
			},
			"title": schema.StringAttribute{
				Required:            true,
				Description:         "The title of the BusinessMetrics.",
				MarkdownDescription: "The title of the BusinessMetrics.",
			},
			"token": schema.StringAttribute{
				Computed:            true,
				Description:         "The token of the business metric",
				MarkdownDescription: "The token of the business metric",
			},
			"values": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"amount": schema.Float64Attribute{
							Required: true,
						},
						"date": schema.StringAttribute{
							Required: true,
						},
						"label": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
					},
					CustomType: ValuesType{
						ObjectType: types.ObjectType{
							AttrTypes: ValuesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The dates, amounts, and (optional) labels for the BusinessMetric.",
				MarkdownDescription: "The dates, amounts, and (optional) labels for the BusinessMetric.",
			},
		},
	}
}

type BusinessMetricModel struct {
	CloudwatchFields             CloudwatchFieldsValue    `tfsdk:"cloudwatch_fields"`
	CostReportTokensWithMetadata types.List               `tfsdk:"cost_report_tokens_with_metadata"`
	CreatedByToken               types.String             `tfsdk:"created_by_token"`
	DatadogMetricFields          DatadogMetricFieldsValue `tfsdk:"datadog_metric_fields"`
	ImportType                   types.String             `tfsdk:"import_type"`
	IntegrationToken             types.String             `tfsdk:"integration_token"`
	Title                        types.String             `tfsdk:"title"`
	Token                        types.String             `tfsdk:"token"`
	Values                       types.List               `tfsdk:"values"`
}

var _ basetypes.ObjectTypable = CloudwatchFieldsType{}

type CloudwatchFieldsType struct {
	basetypes.ObjectType
}

func (t CloudwatchFieldsType) Equal(o attr.Type) bool {
	other, ok := o.(CloudwatchFieldsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudwatchFieldsType) String() string {
	return "CloudwatchFieldsType"
}

func (t CloudwatchFieldsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dimensionsAttribute, ok := attributes["dimensions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dimensions is missing from object`)

		return nil, diags
	}

	dimensionsVal, ok := dimensionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dimensions expected to be basetypes.ListValue, was: %T`, dimensionsAttribute))
	}

	integrationTokenAttribute, ok := attributes["integration_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`integration_token is missing from object`)

		return nil, diags
	}

	integrationTokenVal, ok := integrationTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`integration_token expected to be basetypes.StringValue, was: %T`, integrationTokenAttribute))
	}

	labelDimensionAttribute, ok := attributes["label_dimension"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label_dimension is missing from object`)

		return nil, diags
	}

	labelDimensionVal, ok := labelDimensionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label_dimension expected to be basetypes.StringValue, was: %T`, labelDimensionAttribute))
	}

	metricNameAttribute, ok := attributes["metric_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metric_name is missing from object`)

		return nil, diags
	}

	metricNameVal, ok := metricNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metric_name expected to be basetypes.StringValue, was: %T`, metricNameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	statAttribute, ok := attributes["stat"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`stat is missing from object`)

		return nil, diags
	}

	statVal, ok := statAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`stat expected to be basetypes.StringValue, was: %T`, statAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudwatchFieldsValue{
		Dimensions:       dimensionsVal,
		IntegrationToken: integrationTokenVal,
		LabelDimension:   labelDimensionVal,
		MetricName:       metricNameVal,
		Namespace:        namespaceVal,
		Region:           regionVal,
		Stat:             statVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewCloudwatchFieldsValueNull() CloudwatchFieldsValue {
	return CloudwatchFieldsValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudwatchFieldsValueUnknown() CloudwatchFieldsValue {
	return CloudwatchFieldsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudwatchFieldsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudwatchFieldsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudwatchFieldsValue Attribute Value",
				"While creating a CloudwatchFieldsValue value, a missing attribute value was detected. "+
					"A CloudwatchFieldsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudwatchFieldsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudwatchFieldsValue Attribute Type",
				"While creating a CloudwatchFieldsValue value, an invalid attribute value was detected. "+
					"A CloudwatchFieldsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudwatchFieldsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudwatchFieldsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudwatchFieldsValue Attribute Value",
				"While creating a CloudwatchFieldsValue value, an extra attribute value was detected. "+
					"A CloudwatchFieldsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudwatchFieldsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudwatchFieldsValueUnknown(), diags
	}

	dimensionsAttribute, ok := attributes["dimensions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dimensions is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	dimensionsVal, ok := dimensionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dimensions expected to be basetypes.ListValue, was: %T`, dimensionsAttribute))
	}

	integrationTokenAttribute, ok := attributes["integration_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`integration_token is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	integrationTokenVal, ok := integrationTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`integration_token expected to be basetypes.StringValue, was: %T`, integrationTokenAttribute))
	}

	labelDimensionAttribute, ok := attributes["label_dimension"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label_dimension is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	labelDimensionVal, ok := labelDimensionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label_dimension expected to be basetypes.StringValue, was: %T`, labelDimensionAttribute))
	}

	metricNameAttribute, ok := attributes["metric_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metric_name is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	metricNameVal, ok := metricNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metric_name expected to be basetypes.StringValue, was: %T`, metricNameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	statAttribute, ok := attributes["stat"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`stat is missing from object`)

		return NewCloudwatchFieldsValueUnknown(), diags
	}

	statVal, ok := statAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`stat expected to be basetypes.StringValue, was: %T`, statAttribute))
	}

	if diags.HasError() {
		return NewCloudwatchFieldsValueUnknown(), diags
	}

	return CloudwatchFieldsValue{
		Dimensions:       dimensionsVal,
		IntegrationToken: integrationTokenVal,
		LabelDimension:   labelDimensionVal,
		MetricName:       metricNameVal,
		Namespace:        namespaceVal,
		Region:           regionVal,
		Stat:             statVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewCloudwatchFieldsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudwatchFieldsValue {
	object, diags := NewCloudwatchFieldsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudwatchFieldsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudwatchFieldsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudwatchFieldsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudwatchFieldsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudwatchFieldsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudwatchFieldsValueMust(CloudwatchFieldsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudwatchFieldsType) ValueType(ctx context.Context) attr.Value {
	return CloudwatchFieldsValue{}
}

var _ basetypes.ObjectValuable = CloudwatchFieldsValue{}

type CloudwatchFieldsValue struct {
	Dimensions       basetypes.ListValue   `tfsdk:"dimensions"`
	IntegrationToken basetypes.StringValue `tfsdk:"integration_token"`
	LabelDimension   basetypes.StringValue `tfsdk:"label_dimension"`
	MetricName       basetypes.StringValue `tfsdk:"metric_name"`
	Namespace        basetypes.StringValue `tfsdk:"namespace"`
	Region           basetypes.StringValue `tfsdk:"region"`
	Stat             basetypes.StringValue `tfsdk:"stat"`
	state            attr.ValueState
}

func (v CloudwatchFieldsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["dimensions"] = basetypes.ListType{
		ElemType: DimensionsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["integration_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["label_dimension"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["metric_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["stat"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Dimensions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dimensions"] = val

		val, err = v.IntegrationToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["integration_token"] = val

		val, err = v.LabelDimension.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label_dimension"] = val

		val, err = v.MetricName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metric_name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.Stat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["stat"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudwatchFieldsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudwatchFieldsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudwatchFieldsValue) String() string {
	return "CloudwatchFieldsValue"
}

func (v CloudwatchFieldsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	dimensions := types.ListValueMust(
		DimensionsType{
			basetypes.ObjectType{
				AttrTypes: DimensionsValue{}.AttributeTypes(ctx),
			},
		},
		v.Dimensions.Elements(),
	)

	if v.Dimensions.IsNull() {
		dimensions = types.ListNull(
			DimensionsType{
				basetypes.ObjectType{
					AttrTypes: DimensionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Dimensions.IsUnknown() {
		dimensions = types.ListUnknown(
			DimensionsType{
				basetypes.ObjectType{
					AttrTypes: DimensionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"dimensions": basetypes.ListType{
				ElemType: DimensionsValue{}.Type(ctx),
			},
			"integration_token": basetypes.StringType{},
			"label_dimension":   basetypes.StringType{},
			"metric_name":       basetypes.StringType{},
			"namespace":         basetypes.StringType{},
			"region":            basetypes.StringType{},
			"stat":              basetypes.StringType{},
		},
		map[string]attr.Value{
			"dimensions":        dimensions,
			"integration_token": v.IntegrationToken,
			"label_dimension":   v.LabelDimension,
			"metric_name":       v.MetricName,
			"namespace":         v.Namespace,
			"region":            v.Region,
			"stat":              v.Stat,
		})

	return objVal, diags
}

func (v CloudwatchFieldsValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudwatchFieldsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Dimensions.Equal(other.Dimensions) {
		return false
	}

	if !v.IntegrationToken.Equal(other.IntegrationToken) {
		return false
	}

	if !v.LabelDimension.Equal(other.LabelDimension) {
		return false
	}

	if !v.MetricName.Equal(other.MetricName) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.Stat.Equal(other.Stat) {
		return false
	}

	return true
}

func (v CloudwatchFieldsValue) Type(ctx context.Context) attr.Type {
	return CloudwatchFieldsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudwatchFieldsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"dimensions": basetypes.ListType{
			ElemType: DimensionsValue{}.Type(ctx),
		},
		"integration_token": basetypes.StringType{},
		"label_dimension":   basetypes.StringType{},
		"metric_name":       basetypes.StringType{},
		"namespace":         basetypes.StringType{},
		"region":            basetypes.StringType{},
		"stat":              basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = DimensionsType{}

type DimensionsType struct {
	basetypes.ObjectType
}

func (t DimensionsType) Equal(o attr.Type) bool {
	other, ok := o.(DimensionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DimensionsType) String() string {
	return "DimensionsType"
}

func (t DimensionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DimensionsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewDimensionsValueNull() DimensionsValue {
	return DimensionsValue{
		state: attr.ValueStateNull,
	}
}

func NewDimensionsValueUnknown() DimensionsValue {
	return DimensionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDimensionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DimensionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DimensionsValue Attribute Value",
				"While creating a DimensionsValue value, a missing attribute value was detected. "+
					"A DimensionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DimensionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DimensionsValue Attribute Type",
				"While creating a DimensionsValue value, an invalid attribute value was detected. "+
					"A DimensionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DimensionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DimensionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DimensionsValue Attribute Value",
				"While creating a DimensionsValue value, an extra attribute value was detected. "+
					"A DimensionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DimensionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDimensionsValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewDimensionsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewDimensionsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewDimensionsValueUnknown(), diags
	}

	return DimensionsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewDimensionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DimensionsValue {
	object, diags := NewDimensionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDimensionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DimensionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDimensionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDimensionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDimensionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDimensionsValueMust(DimensionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DimensionsType) ValueType(ctx context.Context) attr.Value {
	return DimensionsValue{}
}

var _ basetypes.ObjectValuable = DimensionsValue{}

type DimensionsValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v DimensionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DimensionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DimensionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DimensionsValue) String() string {
	return "DimensionsValue"
}

func (v DimensionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name":  basetypes.StringType{},
			"value": basetypes.StringType{},
		},
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v DimensionsValue) Equal(o attr.Value) bool {
	other, ok := o.(DimensionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v DimensionsValue) Type(ctx context.Context) attr.Type {
	return DimensionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DimensionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = CostReportTokensWithMetadataType{}

type CostReportTokensWithMetadataType struct {
	basetypes.ObjectType
}

func (t CostReportTokensWithMetadataType) Equal(o attr.Type) bool {
	other, ok := o.(CostReportTokensWithMetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CostReportTokensWithMetadataType) String() string {
	return "CostReportTokensWithMetadataType"
}

func (t CostReportTokensWithMetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	costReportTokenAttribute, ok := attributes["cost_report_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_token is missing from object`)

		return nil, diags
	}

	costReportTokenVal, ok := costReportTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_token expected to be basetypes.StringValue, was: %T`, costReportTokenAttribute))
	}

	labelFilterAttribute, ok := attributes["label_filter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label_filter is missing from object`)

		return nil, diags
	}

	labelFilterVal, ok := labelFilterAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label_filter expected to be basetypes.ListValue, was: %T`, labelFilterAttribute))
	}

	unitScaleAttribute, ok := attributes["unit_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unit_scale is missing from object`)

		return nil, diags
	}

	unitScaleVal, ok := unitScaleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unit_scale expected to be basetypes.StringValue, was: %T`, unitScaleAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CostReportTokensWithMetadataValue{
		CostReportToken: costReportTokenVal,
		LabelFilter:     labelFilterVal,
		UnitScale:       unitScaleVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCostReportTokensWithMetadataValueNull() CostReportTokensWithMetadataValue {
	return CostReportTokensWithMetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewCostReportTokensWithMetadataValueUnknown() CostReportTokensWithMetadataValue {
	return CostReportTokensWithMetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCostReportTokensWithMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CostReportTokensWithMetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CostReportTokensWithMetadataValue Attribute Value",
				"While creating a CostReportTokensWithMetadataValue value, a missing attribute value was detected. "+
					"A CostReportTokensWithMetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CostReportTokensWithMetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CostReportTokensWithMetadataValue Attribute Type",
				"While creating a CostReportTokensWithMetadataValue value, an invalid attribute value was detected. "+
					"A CostReportTokensWithMetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CostReportTokensWithMetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CostReportTokensWithMetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CostReportTokensWithMetadataValue Attribute Value",
				"While creating a CostReportTokensWithMetadataValue value, an extra attribute value was detected. "+
					"A CostReportTokensWithMetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CostReportTokensWithMetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	costReportTokenAttribute, ok := attributes["cost_report_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_token is missing from object`)

		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	costReportTokenVal, ok := costReportTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_token expected to be basetypes.StringValue, was: %T`, costReportTokenAttribute))
	}

	labelFilterAttribute, ok := attributes["label_filter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label_filter is missing from object`)

		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	labelFilterVal, ok := labelFilterAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label_filter expected to be basetypes.ListValue, was: %T`, labelFilterAttribute))
	}

	unitScaleAttribute, ok := attributes["unit_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unit_scale is missing from object`)

		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	unitScaleVal, ok := unitScaleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unit_scale expected to be basetypes.StringValue, was: %T`, unitScaleAttribute))
	}

	if diags.HasError() {
		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	return CostReportTokensWithMetadataValue{
		CostReportToken: costReportTokenVal,
		LabelFilter:     labelFilterVal,
		UnitScale:       unitScaleVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCostReportTokensWithMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CostReportTokensWithMetadataValue {
	object, diags := NewCostReportTokensWithMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCostReportTokensWithMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CostReportTokensWithMetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCostReportTokensWithMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCostReportTokensWithMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCostReportTokensWithMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCostReportTokensWithMetadataValueMust(CostReportTokensWithMetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CostReportTokensWithMetadataType) ValueType(ctx context.Context) attr.Value {
	return CostReportTokensWithMetadataValue{}
}

var _ basetypes.ObjectValuable = CostReportTokensWithMetadataValue{}

type CostReportTokensWithMetadataValue struct {
	CostReportToken basetypes.StringValue `tfsdk:"cost_report_token"`
	LabelFilter     basetypes.ListValue   `tfsdk:"label_filter"`
	UnitScale       basetypes.StringValue `tfsdk:"unit_scale"`
	state           attr.ValueState
}

func (v CostReportTokensWithMetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["cost_report_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["label_filter"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["unit_scale"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.CostReportToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_report_token"] = val

		val, err = v.LabelFilter.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label_filter"] = val

		val, err = v.UnitScale.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["unit_scale"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CostReportTokensWithMetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CostReportTokensWithMetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CostReportTokensWithMetadataValue) String() string {
	return "CostReportTokensWithMetadataValue"
}

func (v CostReportTokensWithMetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	labelFilterVal, d := types.ListValue(types.StringType, v.LabelFilter.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cost_report_token": basetypes.StringType{},
			"label_filter": basetypes.ListType{
				ElemType: types.StringType,
			},
			"unit_scale": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"cost_report_token": basetypes.StringType{},
			"label_filter": basetypes.ListType{
				ElemType: types.StringType,
			},
			"unit_scale": basetypes.StringType{},
		},
		map[string]attr.Value{
			"cost_report_token": v.CostReportToken,
			"label_filter":      labelFilterVal,
			"unit_scale":        v.UnitScale,
		})

	return objVal, diags
}

func (v CostReportTokensWithMetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(CostReportTokensWithMetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CostReportToken.Equal(other.CostReportToken) {
		return false
	}

	if !v.LabelFilter.Equal(other.LabelFilter) {
		return false
	}

	if !v.UnitScale.Equal(other.UnitScale) {
		return false
	}

	return true
}

func (v CostReportTokensWithMetadataValue) Type(ctx context.Context) attr.Type {
	return CostReportTokensWithMetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CostReportTokensWithMetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cost_report_token": basetypes.StringType{},
		"label_filter": basetypes.ListType{
			ElemType: types.StringType,
		},
		"unit_scale": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = DatadogMetricFieldsType{}

type DatadogMetricFieldsType struct {
	basetypes.ObjectType
}

func (t DatadogMetricFieldsType) Equal(o attr.Type) bool {
	other, ok := o.(DatadogMetricFieldsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DatadogMetricFieldsType) String() string {
	return "DatadogMetricFieldsType"
}

func (t DatadogMetricFieldsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	integrationTokenAttribute, ok := attributes["integration_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`integration_token is missing from object`)

		return nil, diags
	}

	integrationTokenVal, ok := integrationTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`integration_token expected to be basetypes.StringValue, was: %T`, integrationTokenAttribute))
	}

	queryAttribute, ok := attributes["query"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`query is missing from object`)

		return nil, diags
	}

	queryVal, ok := queryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`query expected to be basetypes.StringValue, was: %T`, queryAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DatadogMetricFieldsValue{
		IntegrationToken: integrationTokenVal,
		Query:            queryVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewDatadogMetricFieldsValueNull() DatadogMetricFieldsValue {
	return DatadogMetricFieldsValue{
		state: attr.ValueStateNull,
	}
}

func NewDatadogMetricFieldsValueUnknown() DatadogMetricFieldsValue {
	return DatadogMetricFieldsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDatadogMetricFieldsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DatadogMetricFieldsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DatadogMetricFieldsValue Attribute Value",
				"While creating a DatadogMetricFieldsValue value, a missing attribute value was detected. "+
					"A DatadogMetricFieldsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DatadogMetricFieldsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DatadogMetricFieldsValue Attribute Type",
				"While creating a DatadogMetricFieldsValue value, an invalid attribute value was detected. "+
					"A DatadogMetricFieldsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DatadogMetricFieldsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DatadogMetricFieldsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DatadogMetricFieldsValue Attribute Value",
				"While creating a DatadogMetricFieldsValue value, an extra attribute value was detected. "+
					"A DatadogMetricFieldsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DatadogMetricFieldsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDatadogMetricFieldsValueUnknown(), diags
	}

	integrationTokenAttribute, ok := attributes["integration_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`integration_token is missing from object`)

		return NewDatadogMetricFieldsValueUnknown(), diags
	}

	integrationTokenVal, ok := integrationTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`integration_token expected to be basetypes.StringValue, was: %T`, integrationTokenAttribute))
	}

	queryAttribute, ok := attributes["query"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`query is missing from object`)

		return NewDatadogMetricFieldsValueUnknown(), diags
	}

	queryVal, ok := queryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`query expected to be basetypes.StringValue, was: %T`, queryAttribute))
	}

	if diags.HasError() {
		return NewDatadogMetricFieldsValueUnknown(), diags
	}

	return DatadogMetricFieldsValue{
		IntegrationToken: integrationTokenVal,
		Query:            queryVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewDatadogMetricFieldsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DatadogMetricFieldsValue {
	object, diags := NewDatadogMetricFieldsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDatadogMetricFieldsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DatadogMetricFieldsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDatadogMetricFieldsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDatadogMetricFieldsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDatadogMetricFieldsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDatadogMetricFieldsValueMust(DatadogMetricFieldsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DatadogMetricFieldsType) ValueType(ctx context.Context) attr.Value {
	return DatadogMetricFieldsValue{}
}

var _ basetypes.ObjectValuable = DatadogMetricFieldsValue{}

type DatadogMetricFieldsValue struct {
	IntegrationToken basetypes.StringValue `tfsdk:"integration_token"`
	Query            basetypes.StringValue `tfsdk:"query"`
	state            attr.ValueState
}

func (v DatadogMetricFieldsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["integration_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["query"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.IntegrationToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["integration_token"] = val

		val, err = v.Query.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["query"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DatadogMetricFieldsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DatadogMetricFieldsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DatadogMetricFieldsValue) String() string {
	return "DatadogMetricFieldsValue"
}

func (v DatadogMetricFieldsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"integration_token": basetypes.StringType{},
			"query":             basetypes.StringType{},
		},
		map[string]attr.Value{
			"integration_token": v.IntegrationToken,
			"query":             v.Query,
		})

	return objVal, diags
}

func (v DatadogMetricFieldsValue) Equal(o attr.Value) bool {
	other, ok := o.(DatadogMetricFieldsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IntegrationToken.Equal(other.IntegrationToken) {
		return false
	}

	if !v.Query.Equal(other.Query) {
		return false
	}

	return true
}

func (v DatadogMetricFieldsValue) Type(ctx context.Context) attr.Type {
	return DatadogMetricFieldsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DatadogMetricFieldsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"integration_token": basetypes.StringType{},
		"query":             basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ValuesType{}

type ValuesType struct {
	basetypes.ObjectType
}

func (t ValuesType) Equal(o attr.Type) bool {
	other, ok := o.(ValuesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ValuesType) String() string {
	return "ValuesType"
}

func (t ValuesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return nil, diags
	}

	amountVal, ok := amountAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.Float64Value, was: %T`, amountAttribute))
	}

	dateAttribute, ok := attributes["date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date is missing from object`)

		return nil, diags
	}

	dateVal, ok := dateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date expected to be basetypes.StringValue, was: %T`, dateAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return nil, diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ValuesValue{
		Amount: amountVal,
		Date:   dateVal,
		Label:  labelVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewValuesValueNull() ValuesValue {
	return ValuesValue{
		state: attr.ValueStateNull,
	}
}

func NewValuesValueUnknown() ValuesValue {
	return ValuesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewValuesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ValuesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ValuesValue Attribute Value",
				"While creating a ValuesValue value, a missing attribute value was detected. "+
					"A ValuesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ValuesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ValuesValue Attribute Type",
				"While creating a ValuesValue value, an invalid attribute value was detected. "+
					"A ValuesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ValuesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ValuesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ValuesValue Attribute Value",
				"While creating a ValuesValue value, an extra attribute value was detected. "+
					"A ValuesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ValuesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewValuesValueUnknown(), diags
	}

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return NewValuesValueUnknown(), diags
	}

	amountVal, ok := amountAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.Float64Value, was: %T`, amountAttribute))
	}

	dateAttribute, ok := attributes["date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date is missing from object`)

		return NewValuesValueUnknown(), diags
	}

	dateVal, ok := dateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date expected to be basetypes.StringValue, was: %T`, dateAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return NewValuesValueUnknown(), diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	if diags.HasError() {
		return NewValuesValueUnknown(), diags
	}

	return ValuesValue{
		Amount: amountVal,
		Date:   dateVal,
		Label:  labelVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewValuesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ValuesValue {
	object, diags := NewValuesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewValuesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ValuesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewValuesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewValuesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewValuesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewValuesValueMust(ValuesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ValuesType) ValueType(ctx context.Context) attr.Value {
	return ValuesValue{}
}

var _ basetypes.ObjectValuable = ValuesValue{}

type ValuesValue struct {
	Amount basetypes.Float64Value `tfsdk:"amount"`
	Date   basetypes.StringValue  `tfsdk:"date"`
	Label  basetypes.StringValue  `tfsdk:"label"`
	state  attr.ValueState
}

func (v ValuesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["amount"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["label"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Amount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount"] = val

		val, err = v.Date.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["date"] = val

		val, err = v.Label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ValuesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ValuesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ValuesValue) String() string {
	return "ValuesValue"
}

func (v ValuesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"amount": basetypes.Float64Type{},
			"date":   basetypes.StringType{},
			"label":  basetypes.StringType{},
		},
		map[string]attr.Value{
			"amount": v.Amount,
			"date":   v.Date,
			"label":  v.Label,
		})

	return objVal, diags
}

func (v ValuesValue) Equal(o attr.Value) bool {
	other, ok := o.(ValuesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Amount.Equal(other.Amount) {
		return false
	}

	if !v.Date.Equal(other.Date) {
		return false
	}

	if !v.Label.Equal(other.Label) {
		return false
	}

	return true
}

func (v ValuesValue) Type(ctx context.Context) attr.Type {
	return ValuesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ValuesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"amount": basetypes.Float64Type{},
		"date":   basetypes.StringType{},
		"label":  basetypes.StringType{},
	}
}
