// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_dashboard

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DashboardResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
				MarkdownDescription: "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
			},
			"date_bin": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Determines how to group costs in the Dashboard.",
				MarkdownDescription: "Determines how to group costs in the Dashboard.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"cumulative",
						"day",
						"week",
						"month",
					),
				},
			},
			"date_interval": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Determines the date range in the Dashboard. Incompatible with 'start_date' and 'end_date' parameters.",
				MarkdownDescription: "Determines the date range in the Dashboard. Incompatible with 'start_date' and 'end_date' parameters.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"this_month",
						"last_7_days",
						"last_30_days",
						"last_month",
						"last_3_months",
						"last_6_months",
						"custom",
						"last_12_months",
						"last_24_months",
						"last_36_months",
						"next_month",
						"next_3_months",
						"next_6_months",
						"next_12_months",
						"year_to_date",
					),
				},
			},
			"end_date": schema.StringAttribute{
				Required:            true,
				Description:         "The end date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.",
				MarkdownDescription: "The end date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.",
			},
			"saved_filter_tokens": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The tokens of the Saved Filters used in the Dashboard.",
				MarkdownDescription: "The tokens of the Saved Filters used in the Dashboard.",
			},
			"start_date": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The start date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.",
				MarkdownDescription: "The start date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.",
			},
			"title": schema.StringAttribute{
				Required:            true,
				Description:         "The title of the Dashboard.",
				MarkdownDescription: "The title of the Dashboard.",
			},
			"token": schema.StringAttribute{
				Computed:            true,
				Description:         "The token of the dashboard",
				MarkdownDescription: "The token of the dashboard",
			},
			"updated_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
				MarkdownDescription: "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
			},
			"widgets": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"settings": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"display_type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"table",
											"chart",
										),
									},
								},
							},
							CustomType: SettingsType{
								ObjectType: types.ObjectType{
									AttrTypes: SettingsValue{}.AttributeTypes(ctx),
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "The settings for the DashboardWidget.",
							MarkdownDescription: "The settings for the DashboardWidget.",
						},
						"title": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The title of the Widget (defaults to the title of the Resource).",
							MarkdownDescription: "The title of the Widget (defaults to the title of the Resource).",
						},
						"widgetable_token": schema.StringAttribute{
							Required:            true,
							Description:         "The token of the represented Resource.",
							MarkdownDescription: "The token of the represented Resource.",
						},
					},
					CustomType: WidgetsType{
						ObjectType: types.ObjectType{
							AttrTypes: WidgetsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The widgets to add to the Dashboard. Currently supports CostReport, ResourceReport, KubernetesEfficiencyReport, and FinancialCommitmentReport.",
				MarkdownDescription: "The widgets to add to the Dashboard. Currently supports CostReport, ResourceReport, KubernetesEfficiencyReport, and FinancialCommitmentReport.",
			},
			"workspace_token": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The token of the Workspace to add the Dashboard to. Required if the API token is associated with multiple Workspaces.",
				MarkdownDescription: "The token of the Workspace to add the Dashboard to. Required if the API token is associated with multiple Workspaces.",
			},
		},
	}
}

type DashboardModel struct {
	CreatedAt         types.String `tfsdk:"created_at"`
	DateBin           types.String `tfsdk:"date_bin"`
	DateInterval      types.String `tfsdk:"date_interval"`
	EndDate           types.String `tfsdk:"end_date"`
	SavedFilterTokens types.List   `tfsdk:"saved_filter_tokens"`
	StartDate         types.String `tfsdk:"start_date"`
	Title             types.String `tfsdk:"title"`
	Token             types.String `tfsdk:"token"`
	UpdatedAt         types.String `tfsdk:"updated_at"`
	Widgets           types.List   `tfsdk:"widgets"`
	WorkspaceToken    types.String `tfsdk:"workspace_token"`
}

var _ basetypes.ObjectTypable = WidgetsType{}

type WidgetsType struct {
	basetypes.ObjectType
}

func (t WidgetsType) Equal(o attr.Type) bool {
	other, ok := o.(WidgetsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WidgetsType) String() string {
	return "WidgetsType"
}

func (t WidgetsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	widgetableTokenAttribute, ok := attributes["widgetable_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widgetable_token is missing from object`)

		return nil, diags
	}

	widgetableTokenVal, ok := widgetableTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widgetable_token expected to be basetypes.StringValue, was: %T`, widgetableTokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WidgetsValue{
		Settings:        settingsVal,
		Title:           titleVal,
		WidgetableToken: widgetableTokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewWidgetsValueNull() WidgetsValue {
	return WidgetsValue{
		state: attr.ValueStateNull,
	}
}

func NewWidgetsValueUnknown() WidgetsValue {
	return WidgetsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWidgetsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WidgetsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WidgetsValue Attribute Value",
				"While creating a WidgetsValue value, a missing attribute value was detected. "+
					"A WidgetsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WidgetsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WidgetsValue Attribute Type",
				"While creating a WidgetsValue value, an invalid attribute value was detected. "+
					"A WidgetsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WidgetsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WidgetsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WidgetsValue Attribute Value",
				"While creating a WidgetsValue value, an extra attribute value was detected. "+
					"A WidgetsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WidgetsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWidgetsValueUnknown(), diags
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewWidgetsValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewWidgetsValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	widgetableTokenAttribute, ok := attributes["widgetable_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widgetable_token is missing from object`)

		return NewWidgetsValueUnknown(), diags
	}

	widgetableTokenVal, ok := widgetableTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widgetable_token expected to be basetypes.StringValue, was: %T`, widgetableTokenAttribute))
	}

	if diags.HasError() {
		return NewWidgetsValueUnknown(), diags
	}

	return WidgetsValue{
		Settings:        settingsVal,
		Title:           titleVal,
		WidgetableToken: widgetableTokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewWidgetsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WidgetsValue {
	object, diags := NewWidgetsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWidgetsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WidgetsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWidgetsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWidgetsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWidgetsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWidgetsValueMust(WidgetsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WidgetsType) ValueType(ctx context.Context) attr.Value {
	return WidgetsValue{}
}

var _ basetypes.ObjectValuable = WidgetsValue{}

type WidgetsValue struct {
	Settings        basetypes.ObjectValue `tfsdk:"settings"`
	Title           basetypes.StringValue `tfsdk:"title"`
	WidgetableToken basetypes.StringValue `tfsdk:"widgetable_token"`
	state           attr.ValueState
}

func (v WidgetsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["settings"] = basetypes.ObjectType{
		AttrTypes: SettingsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widgetable_token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.WidgetableToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widgetable_token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WidgetsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WidgetsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WidgetsValue) String() string {
	return "WidgetsValue"
}

func (v WidgetsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var settings basetypes.ObjectValue

	if v.Settings.IsNull() {
		settings = types.ObjectNull(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Settings.IsUnknown() {
		settings = types.ObjectUnknown(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Settings.IsNull() && !v.Settings.IsUnknown() {
		settings = types.ObjectValueMust(
			SettingsValue{}.AttributeTypes(ctx),
			v.Settings.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"settings": basetypes.ObjectType{
				AttrTypes: SettingsValue{}.AttributeTypes(ctx),
			},
			"title":            basetypes.StringType{},
			"widgetable_token": basetypes.StringType{},
		},
		map[string]attr.Value{
			"settings":         settings,
			"title":            v.Title,
			"widgetable_token": v.WidgetableToken,
		})

	return objVal, diags
}

func (v WidgetsValue) Equal(o attr.Value) bool {
	other, ok := o.(WidgetsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.WidgetableToken.Equal(other.WidgetableToken) {
		return false
	}

	return true
}

func (v WidgetsValue) Type(ctx context.Context) attr.Type {
	return WidgetsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WidgetsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"settings": basetypes.ObjectType{
			AttrTypes: SettingsValue{}.AttributeTypes(ctx),
		},
		"title":            basetypes.StringType{},
		"widgetable_token": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SettingsType{}

type SettingsType struct {
	basetypes.ObjectType
}

func (t SettingsType) Equal(o attr.Type) bool {
	other, ok := o.(SettingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SettingsType) String() string {
	return "SettingsType"
}

func (t SettingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	displayTypeAttribute, ok := attributes["display_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_type is missing from object`)

		return nil, diags
	}

	displayTypeVal, ok := displayTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_type expected to be basetypes.StringValue, was: %T`, displayTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SettingsValue{
		DisplayType: displayTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueNull() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateNull,
	}
}

func NewSettingsValueUnknown() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSettingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SettingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SettingsValue Attribute Value",
				"While creating a SettingsValue value, a missing attribute value was detected. "+
					"A SettingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SettingsValue Attribute Type",
				"While creating a SettingsValue value, an invalid attribute value was detected. "+
					"A SettingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SettingsValue Attribute Value",
				"While creating a SettingsValue value, an extra attribute value was detected. "+
					"A SettingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SettingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	displayTypeAttribute, ok := attributes["display_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_type is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	displayTypeVal, ok := displayTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_type expected to be basetypes.StringValue, was: %T`, displayTypeAttribute))
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	return SettingsValue{
		DisplayType: displayTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SettingsValue {
	object, diags := NewSettingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSettingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SettingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSettingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSettingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSettingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSettingsValueMust(SettingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SettingsType) ValueType(ctx context.Context) attr.Value {
	return SettingsValue{}
}

var _ basetypes.ObjectValuable = SettingsValue{}

type SettingsValue struct {
	DisplayType basetypes.StringValue `tfsdk:"display_type"`
	state       attr.ValueState
}

func (v SettingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["display_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.DisplayType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SettingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SettingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SettingsValue) String() string {
	return "SettingsValue"
}

func (v SettingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"display_type": basetypes.StringType{},
		},
		map[string]attr.Value{
			"display_type": v.DisplayType,
		})

	return objVal, diags
}

func (v SettingsValue) Equal(o attr.Value) bool {
	other, ok := o.(SettingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DisplayType.Equal(other.DisplayType) {
		return false
	}

	return true
}

func (v SettingsValue) Type(ctx context.Context) attr.Type {
	return SettingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SettingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"display_type": basetypes.StringType{},
	}
}
