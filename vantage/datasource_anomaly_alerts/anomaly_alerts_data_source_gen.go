// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_anomaly_alerts

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AnomalyAlertsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"anomaly_alerts": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alerted_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the AnomalyAlert is sent. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, the AnomalyAlert is sent. ISO 8601 Formatted.",
						},
						"amount": schema.StringAttribute{
							Computed:            true,
							Description:         "The amount observed.",
							MarkdownDescription: "The amount observed.",
						},
						"category": schema.StringAttribute{
							Computed:            true,
							Description:         "The category of the AnomalyAlert.",
							MarkdownDescription: "The category of the AnomalyAlert.",
						},
						"cost_report_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The token of the Report associated with the AnomalyAlert.",
							MarkdownDescription: "The token of the Report associated with the AnomalyAlert.",
						},
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the AnomalyAlert was created. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, the AnomalyAlert was created. ISO 8601 Formatted.",
						},
						"feedback": schema.StringAttribute{
							Computed:            true,
							Description:         "The user-provided feedback of why alert was ignored/archived.",
							MarkdownDescription: "The user-provided feedback of why alert was ignored/archived.",
						},
						"previous_amount": schema.StringAttribute{
							Computed:            true,
							Description:         "The previous amount observed.",
							MarkdownDescription: "The previous amount observed.",
						},
						"provider": schema.StringAttribute{
							Computed:            true,
							Description:         "The provider of the service causing the AnomalyAlert.",
							MarkdownDescription: "The provider of the service causing the AnomalyAlert.",
						},
						"service": schema.StringAttribute{
							Computed:            true,
							Description:         "The provider service causing the AnomalyAlert.",
							MarkdownDescription: "The provider service causing the AnomalyAlert.",
						},
						"seven_day_average": schema.StringAttribute{
							Computed:            true,
							Description:         "The seven day average of the amount observed.",
							MarkdownDescription: "The seven day average of the amount observed.",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "The status of the AnomalyAlert.",
							MarkdownDescription: "The status of the AnomalyAlert.",
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: AnomalyAlertsType{
						ObjectType: types.ObjectType{
							AttrTypes: AnomalyAlertsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type AnomalyAlertsModel struct {
	AnomalyAlerts types.List `tfsdk:"anomaly_alerts"`
}

var _ basetypes.ObjectTypable = AnomalyAlertsType{}

type AnomalyAlertsType struct {
	basetypes.ObjectType
}

func (t AnomalyAlertsType) Equal(o attr.Type) bool {
	other, ok := o.(AnomalyAlertsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AnomalyAlertsType) String() string {
	return "AnomalyAlertsType"
}

func (t AnomalyAlertsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alertedAtAttribute, ok := attributes["alerted_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alerted_at is missing from object`)

		return nil, diags
	}

	alertedAtVal, ok := alertedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alerted_at expected to be basetypes.StringValue, was: %T`, alertedAtAttribute))
	}

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return nil, diags
	}

	amountVal, ok := amountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.StringValue, was: %T`, amountAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return nil, diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	costReportTokenAttribute, ok := attributes["cost_report_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_token is missing from object`)

		return nil, diags
	}

	costReportTokenVal, ok := costReportTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_token expected to be basetypes.StringValue, was: %T`, costReportTokenAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	feedbackAttribute, ok := attributes["feedback"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`feedback is missing from object`)

		return nil, diags
	}

	feedbackVal, ok := feedbackAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`feedback expected to be basetypes.StringValue, was: %T`, feedbackAttribute))
	}

	previousAmountAttribute, ok := attributes["previous_amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`previous_amount is missing from object`)

		return nil, diags
	}

	previousAmountVal, ok := previousAmountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`previous_amount expected to be basetypes.StringValue, was: %T`, previousAmountAttribute))
	}

	providerAttribute, ok := attributes["provider"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider is missing from object`)

		return nil, diags
	}

	providerVal, ok := providerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider expected to be basetypes.StringValue, was: %T`, providerAttribute))
	}

	serviceAttribute, ok := attributes["service"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service is missing from object`)

		return nil, diags
	}

	serviceVal, ok := serviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service expected to be basetypes.StringValue, was: %T`, serviceAttribute))
	}

	sevenDayAverageAttribute, ok := attributes["seven_day_average"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`seven_day_average is missing from object`)

		return nil, diags
	}

	sevenDayAverageVal, ok := sevenDayAverageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`seven_day_average expected to be basetypes.StringValue, was: %T`, sevenDayAverageAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AnomalyAlertsValue{
		AlertedAt:       alertedAtVal,
		Amount:          amountVal,
		Category:        categoryVal,
		CostReportToken: costReportTokenVal,
		CreatedAt:       createdAtVal,
		Feedback:        feedbackVal,
		PreviousAmount:  previousAmountVal,
		Provider:        providerVal,
		Service:         serviceVal,
		SevenDayAverage: sevenDayAverageVal,
		Status:          statusVal,
		Token:           tokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewAnomalyAlertsValueNull() AnomalyAlertsValue {
	return AnomalyAlertsValue{
		state: attr.ValueStateNull,
	}
}

func NewAnomalyAlertsValueUnknown() AnomalyAlertsValue {
	return AnomalyAlertsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAnomalyAlertsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AnomalyAlertsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AnomalyAlertsValue Attribute Value",
				"While creating a AnomalyAlertsValue value, a missing attribute value was detected. "+
					"A AnomalyAlertsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AnomalyAlertsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AnomalyAlertsValue Attribute Type",
				"While creating a AnomalyAlertsValue value, an invalid attribute value was detected. "+
					"A AnomalyAlertsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AnomalyAlertsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AnomalyAlertsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AnomalyAlertsValue Attribute Value",
				"While creating a AnomalyAlertsValue value, an extra attribute value was detected. "+
					"A AnomalyAlertsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AnomalyAlertsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAnomalyAlertsValueUnknown(), diags
	}

	alertedAtAttribute, ok := attributes["alerted_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alerted_at is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	alertedAtVal, ok := alertedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alerted_at expected to be basetypes.StringValue, was: %T`, alertedAtAttribute))
	}

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	amountVal, ok := amountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.StringValue, was: %T`, amountAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	costReportTokenAttribute, ok := attributes["cost_report_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_token is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	costReportTokenVal, ok := costReportTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_token expected to be basetypes.StringValue, was: %T`, costReportTokenAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	feedbackAttribute, ok := attributes["feedback"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`feedback is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	feedbackVal, ok := feedbackAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`feedback expected to be basetypes.StringValue, was: %T`, feedbackAttribute))
	}

	previousAmountAttribute, ok := attributes["previous_amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`previous_amount is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	previousAmountVal, ok := previousAmountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`previous_amount expected to be basetypes.StringValue, was: %T`, previousAmountAttribute))
	}

	providerAttribute, ok := attributes["provider"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	providerVal, ok := providerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider expected to be basetypes.StringValue, was: %T`, providerAttribute))
	}

	serviceAttribute, ok := attributes["service"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	serviceVal, ok := serviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service expected to be basetypes.StringValue, was: %T`, serviceAttribute))
	}

	sevenDayAverageAttribute, ok := attributes["seven_day_average"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`seven_day_average is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	sevenDayAverageVal, ok := sevenDayAverageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`seven_day_average expected to be basetypes.StringValue, was: %T`, sevenDayAverageAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewAnomalyAlertsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewAnomalyAlertsValueUnknown(), diags
	}

	return AnomalyAlertsValue{
		AlertedAt:       alertedAtVal,
		Amount:          amountVal,
		Category:        categoryVal,
		CostReportToken: costReportTokenVal,
		CreatedAt:       createdAtVal,
		Feedback:        feedbackVal,
		PreviousAmount:  previousAmountVal,
		Provider:        providerVal,
		Service:         serviceVal,
		SevenDayAverage: sevenDayAverageVal,
		Status:          statusVal,
		Token:           tokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewAnomalyAlertsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AnomalyAlertsValue {
	object, diags := NewAnomalyAlertsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAnomalyAlertsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AnomalyAlertsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAnomalyAlertsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAnomalyAlertsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAnomalyAlertsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAnomalyAlertsValueMust(AnomalyAlertsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AnomalyAlertsType) ValueType(ctx context.Context) attr.Value {
	return AnomalyAlertsValue{}
}

var _ basetypes.ObjectValuable = AnomalyAlertsValue{}

type AnomalyAlertsValue struct {
	AlertedAt       basetypes.StringValue `tfsdk:"alerted_at"`
	Amount          basetypes.StringValue `tfsdk:"amount"`
	Category        basetypes.StringValue `tfsdk:"category"`
	CostReportToken basetypes.StringValue `tfsdk:"cost_report_token"`
	CreatedAt       basetypes.StringValue `tfsdk:"created_at"`
	Feedback        basetypes.StringValue `tfsdk:"feedback"`
	PreviousAmount  basetypes.StringValue `tfsdk:"previous_amount"`
	Provider        basetypes.StringValue `tfsdk:"provider"`
	Service         basetypes.StringValue `tfsdk:"service"`
	SevenDayAverage basetypes.StringValue `tfsdk:"seven_day_average"`
	Status          basetypes.StringValue `tfsdk:"status"`
	Token           basetypes.StringValue `tfsdk:"token"`
	state           attr.ValueState
}

func (v AnomalyAlertsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["alerted_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["amount"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cost_report_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["feedback"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["previous_amount"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["service"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["seven_day_average"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.AlertedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alerted_at"] = val

		val, err = v.Amount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount"] = val

		val, err = v.Category.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category"] = val

		val, err = v.CostReportToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_report_token"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Feedback.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["feedback"] = val

		val, err = v.PreviousAmount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["previous_amount"] = val

		val, err = v.Provider.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider"] = val

		val, err = v.Service.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service"] = val

		val, err = v.SevenDayAverage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["seven_day_average"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AnomalyAlertsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AnomalyAlertsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AnomalyAlertsValue) String() string {
	return "AnomalyAlertsValue"
}

func (v AnomalyAlertsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"alerted_at":        basetypes.StringType{},
			"amount":            basetypes.StringType{},
			"category":          basetypes.StringType{},
			"cost_report_token": basetypes.StringType{},
			"created_at":        basetypes.StringType{},
			"feedback":          basetypes.StringType{},
			"previous_amount":   basetypes.StringType{},
			"provider":          basetypes.StringType{},
			"service":           basetypes.StringType{},
			"seven_day_average": basetypes.StringType{},
			"status":            basetypes.StringType{},
			"token":             basetypes.StringType{},
		},
		map[string]attr.Value{
			"alerted_at":        v.AlertedAt,
			"amount":            v.Amount,
			"category":          v.Category,
			"cost_report_token": v.CostReportToken,
			"created_at":        v.CreatedAt,
			"feedback":          v.Feedback,
			"previous_amount":   v.PreviousAmount,
			"provider":          v.Provider,
			"service":           v.Service,
			"seven_day_average": v.SevenDayAverage,
			"status":            v.Status,
			"token":             v.Token,
		})

	return objVal, diags
}

func (v AnomalyAlertsValue) Equal(o attr.Value) bool {
	other, ok := o.(AnomalyAlertsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AlertedAt.Equal(other.AlertedAt) {
		return false
	}

	if !v.Amount.Equal(other.Amount) {
		return false
	}

	if !v.Category.Equal(other.Category) {
		return false
	}

	if !v.CostReportToken.Equal(other.CostReportToken) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Feedback.Equal(other.Feedback) {
		return false
	}

	if !v.PreviousAmount.Equal(other.PreviousAmount) {
		return false
	}

	if !v.Provider.Equal(other.Provider) {
		return false
	}

	if !v.Service.Equal(other.Service) {
		return false
	}

	if !v.SevenDayAverage.Equal(other.SevenDayAverage) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v AnomalyAlertsValue) Type(ctx context.Context) attr.Type {
	return AnomalyAlertsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AnomalyAlertsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alerted_at":        basetypes.StringType{},
		"amount":            basetypes.StringType{},
		"category":          basetypes.StringType{},
		"cost_report_token": basetypes.StringType{},
		"created_at":        basetypes.StringType{},
		"feedback":          basetypes.StringType{},
		"previous_amount":   basetypes.StringType{},
		"provider":          basetypes.StringType{},
		"service":           basetypes.StringType{},
		"seven_day_average": basetypes.StringType{},
		"status":            basetypes.StringType{},
		"token":             basetypes.StringType{},
	}
}
