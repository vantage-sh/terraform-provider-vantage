// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_invoices

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func InvoicesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"invoices": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"account_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the managed account this invoice belongs to",
							MarkdownDescription: "Name of the managed account this invoice belongs to",
						},
						"account_token": schema.StringAttribute{
							Computed:            true,
							Description:         "Token of the managed account this invoice belongs to",
							MarkdownDescription: "Token of the managed account this invoice belongs to",
						},
						"billing_period_end": schema.StringAttribute{
							Computed:            true,
							Description:         "End date of the billing period. ISO 8601 formatted.",
							MarkdownDescription: "End date of the billing period. ISO 8601 formatted.",
						},
						"billing_period_start": schema.StringAttribute{
							Computed:            true,
							Description:         "Start date of the billing period. ISO 8601 formatted.",
							MarkdownDescription: "Start date of the billing period. ISO 8601 formatted.",
						},
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the invoice was created. ISO 8601 formatted.",
							MarkdownDescription: "The date and time, in UTC, the invoice was created. ISO 8601 formatted.",
						},
						"invoice_number": schema.StringAttribute{
							Computed:            true,
							Description:         "Sequential invoice number for the MSP account",
							MarkdownDescription: "Sequential invoice number for the MSP account",
						},
						"msp_account_token": schema.StringAttribute{
							Computed:            true,
							Description:         "Token of the MSP account that owns this invoice",
							MarkdownDescription: "Token of the MSP account that owns this invoice",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "Current status of the invoice",
							MarkdownDescription: "Current status of the invoice",
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
						"total": schema.StringAttribute{
							Computed:            true,
							Description:         "Total amount for the invoice period",
							MarkdownDescription: "Total amount for the invoice period",
						},
						"updated_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the invoice was last updated. ISO 8601 formatted.",
							MarkdownDescription: "The date and time, in UTC, the invoice was last updated. ISO 8601 formatted.",
						},
					},
					CustomType: InvoicesType{
						ObjectType: types.ObjectType{
							AttrTypes: InvoicesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"managed_account_token": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Filter invoices by managed account token (MSP accounts only)",
				MarkdownDescription: "Filter invoices by managed account token (MSP accounts only)",
			},
		},
	}
}

type InvoicesModel struct {
	Invoices            types.List   `tfsdk:"invoices"`
	ManagedAccountToken types.String `tfsdk:"managed_account_token"`
}

var _ basetypes.ObjectTypable = InvoicesType{}

type InvoicesType struct {
	basetypes.ObjectType
}

func (t InvoicesType) Equal(o attr.Type) bool {
	other, ok := o.(InvoicesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InvoicesType) String() string {
	return "InvoicesType"
}

func (t InvoicesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accountNameAttribute, ok := attributes["account_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_name is missing from object`)

		return nil, diags
	}

	accountNameVal, ok := accountNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_name expected to be basetypes.StringValue, was: %T`, accountNameAttribute))
	}

	accountTokenAttribute, ok := attributes["account_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_token is missing from object`)

		return nil, diags
	}

	accountTokenVal, ok := accountTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_token expected to be basetypes.StringValue, was: %T`, accountTokenAttribute))
	}

	billingPeriodEndAttribute, ok := attributes["billing_period_end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_period_end is missing from object`)

		return nil, diags
	}

	billingPeriodEndVal, ok := billingPeriodEndAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_period_end expected to be basetypes.StringValue, was: %T`, billingPeriodEndAttribute))
	}

	billingPeriodStartAttribute, ok := attributes["billing_period_start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_period_start is missing from object`)

		return nil, diags
	}

	billingPeriodStartVal, ok := billingPeriodStartAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_period_start expected to be basetypes.StringValue, was: %T`, billingPeriodStartAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	invoiceNumberAttribute, ok := attributes["invoice_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`invoice_number is missing from object`)

		return nil, diags
	}

	invoiceNumberVal, ok := invoiceNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`invoice_number expected to be basetypes.StringValue, was: %T`, invoiceNumberAttribute))
	}

	mspAccountTokenAttribute, ok := attributes["msp_account_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`msp_account_token is missing from object`)

		return nil, diags
	}

	mspAccountTokenVal, ok := mspAccountTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`msp_account_token expected to be basetypes.StringValue, was: %T`, mspAccountTokenAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	totalAttribute, ok := attributes["total"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total is missing from object`)

		return nil, diags
	}

	totalVal, ok := totalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total expected to be basetypes.StringValue, was: %T`, totalAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InvoicesValue{
		AccountName:        accountNameVal,
		AccountToken:       accountTokenVal,
		BillingPeriodEnd:   billingPeriodEndVal,
		BillingPeriodStart: billingPeriodStartVal,
		CreatedAt:          createdAtVal,
		InvoiceNumber:      invoiceNumberVal,
		MspAccountToken:    mspAccountTokenVal,
		Status:             statusVal,
		Token:              tokenVal,
		Total:              totalVal,
		UpdatedAt:          updatedAtVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewInvoicesValueNull() InvoicesValue {
	return InvoicesValue{
		state: attr.ValueStateNull,
	}
}

func NewInvoicesValueUnknown() InvoicesValue {
	return InvoicesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInvoicesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InvoicesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InvoicesValue Attribute Value",
				"While creating a InvoicesValue value, a missing attribute value was detected. "+
					"A InvoicesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InvoicesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InvoicesValue Attribute Type",
				"While creating a InvoicesValue value, an invalid attribute value was detected. "+
					"A InvoicesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InvoicesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InvoicesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InvoicesValue Attribute Value",
				"While creating a InvoicesValue value, an extra attribute value was detected. "+
					"A InvoicesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InvoicesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInvoicesValueUnknown(), diags
	}

	accountNameAttribute, ok := attributes["account_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_name is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	accountNameVal, ok := accountNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_name expected to be basetypes.StringValue, was: %T`, accountNameAttribute))
	}

	accountTokenAttribute, ok := attributes["account_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_token is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	accountTokenVal, ok := accountTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_token expected to be basetypes.StringValue, was: %T`, accountTokenAttribute))
	}

	billingPeriodEndAttribute, ok := attributes["billing_period_end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_period_end is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	billingPeriodEndVal, ok := billingPeriodEndAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_period_end expected to be basetypes.StringValue, was: %T`, billingPeriodEndAttribute))
	}

	billingPeriodStartAttribute, ok := attributes["billing_period_start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_period_start is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	billingPeriodStartVal, ok := billingPeriodStartAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_period_start expected to be basetypes.StringValue, was: %T`, billingPeriodStartAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	invoiceNumberAttribute, ok := attributes["invoice_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`invoice_number is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	invoiceNumberVal, ok := invoiceNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`invoice_number expected to be basetypes.StringValue, was: %T`, invoiceNumberAttribute))
	}

	mspAccountTokenAttribute, ok := attributes["msp_account_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`msp_account_token is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	mspAccountTokenVal, ok := mspAccountTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`msp_account_token expected to be basetypes.StringValue, was: %T`, mspAccountTokenAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	totalAttribute, ok := attributes["total"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	totalVal, ok := totalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total expected to be basetypes.StringValue, was: %T`, totalAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewInvoicesValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewInvoicesValueUnknown(), diags
	}

	return InvoicesValue{
		AccountName:        accountNameVal,
		AccountToken:       accountTokenVal,
		BillingPeriodEnd:   billingPeriodEndVal,
		BillingPeriodStart: billingPeriodStartVal,
		CreatedAt:          createdAtVal,
		InvoiceNumber:      invoiceNumberVal,
		MspAccountToken:    mspAccountTokenVal,
		Status:             statusVal,
		Token:              tokenVal,
		Total:              totalVal,
		UpdatedAt:          updatedAtVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewInvoicesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InvoicesValue {
	object, diags := NewInvoicesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInvoicesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InvoicesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInvoicesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInvoicesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInvoicesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInvoicesValueMust(InvoicesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InvoicesType) ValueType(ctx context.Context) attr.Value {
	return InvoicesValue{}
}

var _ basetypes.ObjectValuable = InvoicesValue{}

type InvoicesValue struct {
	AccountName        basetypes.StringValue `tfsdk:"account_name"`
	AccountToken       basetypes.StringValue `tfsdk:"account_token"`
	BillingPeriodEnd   basetypes.StringValue `tfsdk:"billing_period_end"`
	BillingPeriodStart basetypes.StringValue `tfsdk:"billing_period_start"`
	CreatedAt          basetypes.StringValue `tfsdk:"created_at"`
	InvoiceNumber      basetypes.StringValue `tfsdk:"invoice_number"`
	MspAccountToken    basetypes.StringValue `tfsdk:"msp_account_token"`
	Status             basetypes.StringValue `tfsdk:"status"`
	Token              basetypes.StringValue `tfsdk:"token"`
	Total              basetypes.StringValue `tfsdk:"total"`
	UpdatedAt          basetypes.StringValue `tfsdk:"updated_at"`
	state              attr.ValueState
}

func (v InvoicesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 11)

	var val tftypes.Value
	var err error

	attrTypes["account_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["account_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["billing_period_end"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["billing_period_start"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["invoice_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["msp_account_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["total"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 11)

		val, err = v.AccountName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["account_name"] = val

		val, err = v.AccountToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["account_token"] = val

		val, err = v.BillingPeriodEnd.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_period_end"] = val

		val, err = v.BillingPeriodStart.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_period_start"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.InvoiceNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["invoice_number"] = val

		val, err = v.MspAccountToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["msp_account_token"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.Total.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["total"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InvoicesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InvoicesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InvoicesValue) String() string {
	return "InvoicesValue"
}

func (v InvoicesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"account_name":         basetypes.StringType{},
			"account_token":        basetypes.StringType{},
			"billing_period_end":   basetypes.StringType{},
			"billing_period_start": basetypes.StringType{},
			"created_at":           basetypes.StringType{},
			"invoice_number":       basetypes.StringType{},
			"msp_account_token":    basetypes.StringType{},
			"status":               basetypes.StringType{},
			"token":                basetypes.StringType{},
			"total":                basetypes.StringType{},
			"updated_at":           basetypes.StringType{},
		},
		map[string]attr.Value{
			"account_name":         v.AccountName,
			"account_token":        v.AccountToken,
			"billing_period_end":   v.BillingPeriodEnd,
			"billing_period_start": v.BillingPeriodStart,
			"created_at":           v.CreatedAt,
			"invoice_number":       v.InvoiceNumber,
			"msp_account_token":    v.MspAccountToken,
			"status":               v.Status,
			"token":                v.Token,
			"total":                v.Total,
			"updated_at":           v.UpdatedAt,
		})

	return objVal, diags
}

func (v InvoicesValue) Equal(o attr.Value) bool {
	other, ok := o.(InvoicesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccountName.Equal(other.AccountName) {
		return false
	}

	if !v.AccountToken.Equal(other.AccountToken) {
		return false
	}

	if !v.BillingPeriodEnd.Equal(other.BillingPeriodEnd) {
		return false
	}

	if !v.BillingPeriodStart.Equal(other.BillingPeriodStart) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.InvoiceNumber.Equal(other.InvoiceNumber) {
		return false
	}

	if !v.MspAccountToken.Equal(other.MspAccountToken) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.Total.Equal(other.Total) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v InvoicesValue) Type(ctx context.Context) attr.Type {
	return InvoicesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InvoicesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"account_name":         basetypes.StringType{},
		"account_token":        basetypes.StringType{},
		"billing_period_end":   basetypes.StringType{},
		"billing_period_start": basetypes.StringType{},
		"created_at":           basetypes.StringType{},
		"invoice_number":       basetypes.StringType{},
		"msp_account_token":    basetypes.StringType{},
		"status":               basetypes.StringType{},
		"token":                basetypes.StringType{},
		"total":                basetypes.StringType{},
		"updated_at":           basetypes.StringType{},
	}
}
