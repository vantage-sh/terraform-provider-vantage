// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_managed_accounts

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ManagedAccountsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"managed_accounts": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"access_credential_tokens": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The tokens for the Access Credentials assigned to the Managed Account.",
							MarkdownDescription: "The tokens for the Access Credentials assigned to the Managed Account.",
						},
						"billing_information_attributes": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"address_line_1": schema.StringAttribute{
									Computed:            true,
									Description:         "First line of billing address",
									MarkdownDescription: "First line of billing address",
								},
								"address_line_2": schema.StringAttribute{
									Computed:            true,
									Description:         "Second line of billing address",
									MarkdownDescription: "Second line of billing address",
								},
								"billing_email": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "Array of billing email addresses",
									MarkdownDescription: "Array of billing email addresses",
								},
								"city": schema.StringAttribute{
									Computed:            true,
									Description:         "City for billing address",
									MarkdownDescription: "City for billing address",
								},
								"company_name": schema.StringAttribute{
									Computed:            true,
									Description:         "Company name for billing",
									MarkdownDescription: "Company name for billing",
								},
								"country_code": schema.StringAttribute{
									Computed:            true,
									Description:         "ISO country code",
									MarkdownDescription: "ISO country code",
								},
								"postal_code": schema.StringAttribute{
									Computed:            true,
									Description:         "Postal or ZIP code",
									MarkdownDescription: "Postal or ZIP code",
								},
								"state": schema.StringAttribute{
									Computed:            true,
									Description:         "State or province for billing address",
									MarkdownDescription: "State or province for billing address",
								},
								"token": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: BillingInformationAttributesType{
								ObjectType: types.ObjectType{
									AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"billing_rule_tokens": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The tokens for the Billing Rules assigned to the Managed Account.",
							MarkdownDescription: "The tokens for the Billing Rules assigned to the Managed Account.",
						},
						"business_information_attributes": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"metadata": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"custom_fields": schema.ListNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														Computed:            true,
														Description:         "Custom field name",
														MarkdownDescription: "Custom field name",
													},
													"value": schema.StringAttribute{
														Computed:            true,
														Description:         "Custom field value",
														MarkdownDescription: "Custom field value",
													},
												},
												CustomType: CustomFieldsType{
													ObjectType: types.ObjectType{
														AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
													},
												},
											},
											Computed:            true,
											Description:         "Array of custom field objects",
											MarkdownDescription: "Array of custom field objects",
										},
									},
									CustomType: MetadataType{
										ObjectType: types.ObjectType{
											AttrTypes: MetadataValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"token": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: BusinessInformationAttributesType{
								ObjectType: types.ObjectType{
									AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"contact_email": schema.StringAttribute{
							Computed: true,
						},
						"msp_billing_profile_token": schema.StringAttribute{
							Computed:            true,
							Description:         "Token of the MSP billing profile used for this managed account (MSP invoicing accounts only)",
							MarkdownDescription: "Token of the MSP billing profile used for this managed account (MSP invoicing accounts only)",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"parent_account_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The token for the parent Account.",
							MarkdownDescription: "The token for the parent Account.",
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: ManagedAccountsType{
						ObjectType: types.ObjectType{
							AttrTypes: ManagedAccountsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type ManagedAccountsModel struct {
	ManagedAccounts types.List `tfsdk:"managed_accounts"`
}

var _ basetypes.ObjectTypable = ManagedAccountsType{}

type ManagedAccountsType struct {
	basetypes.ObjectType
}

func (t ManagedAccountsType) Equal(o attr.Type) bool {
	other, ok := o.(ManagedAccountsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ManagedAccountsType) String() string {
	return "ManagedAccountsType"
}

func (t ManagedAccountsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accessCredentialTokensAttribute, ok := attributes["access_credential_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_credential_tokens is missing from object`)

		return nil, diags
	}

	accessCredentialTokensVal, ok := accessCredentialTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_credential_tokens expected to be basetypes.ListValue, was: %T`, accessCredentialTokensAttribute))
	}

	billingInformationAttributesAttribute, ok := attributes["billing_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_information_attributes is missing from object`)

		return nil, diags
	}

	billingInformationAttributesVal, ok := billingInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_information_attributes expected to be basetypes.ObjectValue, was: %T`, billingInformationAttributesAttribute))
	}

	billingRuleTokensAttribute, ok := attributes["billing_rule_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_rule_tokens is missing from object`)

		return nil, diags
	}

	billingRuleTokensVal, ok := billingRuleTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_rule_tokens expected to be basetypes.ListValue, was: %T`, billingRuleTokensAttribute))
	}

	businessInformationAttributesAttribute, ok := attributes["business_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`business_information_attributes is missing from object`)

		return nil, diags
	}

	businessInformationAttributesVal, ok := businessInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`business_information_attributes expected to be basetypes.ObjectValue, was: %T`, businessInformationAttributesAttribute))
	}

	contactEmailAttribute, ok := attributes["contact_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`contact_email is missing from object`)

		return nil, diags
	}

	contactEmailVal, ok := contactEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`contact_email expected to be basetypes.StringValue, was: %T`, contactEmailAttribute))
	}

	mspBillingProfileTokenAttribute, ok := attributes["msp_billing_profile_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`msp_billing_profile_token is missing from object`)

		return nil, diags
	}

	mspBillingProfileTokenVal, ok := mspBillingProfileTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`msp_billing_profile_token expected to be basetypes.StringValue, was: %T`, mspBillingProfileTokenAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	parentAccountTokenAttribute, ok := attributes["parent_account_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_account_token is missing from object`)

		return nil, diags
	}

	parentAccountTokenVal, ok := parentAccountTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_account_token expected to be basetypes.StringValue, was: %T`, parentAccountTokenAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ManagedAccountsValue{
		AccessCredentialTokens:        accessCredentialTokensVal,
		BillingInformationAttributes:  billingInformationAttributesVal,
		BillingRuleTokens:             billingRuleTokensVal,
		BusinessInformationAttributes: businessInformationAttributesVal,
		ContactEmail:                  contactEmailVal,
		MspBillingProfileToken:        mspBillingProfileTokenVal,
		Name:                          nameVal,
		ParentAccountToken:            parentAccountTokenVal,
		Token:                         tokenVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewManagedAccountsValueNull() ManagedAccountsValue {
	return ManagedAccountsValue{
		state: attr.ValueStateNull,
	}
}

func NewManagedAccountsValueUnknown() ManagedAccountsValue {
	return ManagedAccountsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewManagedAccountsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ManagedAccountsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ManagedAccountsValue Attribute Value",
				"While creating a ManagedAccountsValue value, a missing attribute value was detected. "+
					"A ManagedAccountsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ManagedAccountsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ManagedAccountsValue Attribute Type",
				"While creating a ManagedAccountsValue value, an invalid attribute value was detected. "+
					"A ManagedAccountsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ManagedAccountsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ManagedAccountsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ManagedAccountsValue Attribute Value",
				"While creating a ManagedAccountsValue value, an extra attribute value was detected. "+
					"A ManagedAccountsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ManagedAccountsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewManagedAccountsValueUnknown(), diags
	}

	accessCredentialTokensAttribute, ok := attributes["access_credential_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_credential_tokens is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	accessCredentialTokensVal, ok := accessCredentialTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_credential_tokens expected to be basetypes.ListValue, was: %T`, accessCredentialTokensAttribute))
	}

	billingInformationAttributesAttribute, ok := attributes["billing_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_information_attributes is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	billingInformationAttributesVal, ok := billingInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_information_attributes expected to be basetypes.ObjectValue, was: %T`, billingInformationAttributesAttribute))
	}

	billingRuleTokensAttribute, ok := attributes["billing_rule_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_rule_tokens is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	billingRuleTokensVal, ok := billingRuleTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_rule_tokens expected to be basetypes.ListValue, was: %T`, billingRuleTokensAttribute))
	}

	businessInformationAttributesAttribute, ok := attributes["business_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`business_information_attributes is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	businessInformationAttributesVal, ok := businessInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`business_information_attributes expected to be basetypes.ObjectValue, was: %T`, businessInformationAttributesAttribute))
	}

	contactEmailAttribute, ok := attributes["contact_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`contact_email is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	contactEmailVal, ok := contactEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`contact_email expected to be basetypes.StringValue, was: %T`, contactEmailAttribute))
	}

	mspBillingProfileTokenAttribute, ok := attributes["msp_billing_profile_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`msp_billing_profile_token is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	mspBillingProfileTokenVal, ok := mspBillingProfileTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`msp_billing_profile_token expected to be basetypes.StringValue, was: %T`, mspBillingProfileTokenAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	parentAccountTokenAttribute, ok := attributes["parent_account_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_account_token is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	parentAccountTokenVal, ok := parentAccountTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_account_token expected to be basetypes.StringValue, was: %T`, parentAccountTokenAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewManagedAccountsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewManagedAccountsValueUnknown(), diags
	}

	return ManagedAccountsValue{
		AccessCredentialTokens:        accessCredentialTokensVal,
		BillingInformationAttributes:  billingInformationAttributesVal,
		BillingRuleTokens:             billingRuleTokensVal,
		BusinessInformationAttributes: businessInformationAttributesVal,
		ContactEmail:                  contactEmailVal,
		MspBillingProfileToken:        mspBillingProfileTokenVal,
		Name:                          nameVal,
		ParentAccountToken:            parentAccountTokenVal,
		Token:                         tokenVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewManagedAccountsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ManagedAccountsValue {
	object, diags := NewManagedAccountsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewManagedAccountsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ManagedAccountsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewManagedAccountsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewManagedAccountsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewManagedAccountsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewManagedAccountsValueMust(ManagedAccountsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ManagedAccountsType) ValueType(ctx context.Context) attr.Value {
	return ManagedAccountsValue{}
}

var _ basetypes.ObjectValuable = ManagedAccountsValue{}

type ManagedAccountsValue struct {
	AccessCredentialTokens        basetypes.ListValue   `tfsdk:"access_credential_tokens"`
	BillingInformationAttributes  basetypes.ObjectValue `tfsdk:"billing_information_attributes"`
	BillingRuleTokens             basetypes.ListValue   `tfsdk:"billing_rule_tokens"`
	BusinessInformationAttributes basetypes.ObjectValue `tfsdk:"business_information_attributes"`
	ContactEmail                  basetypes.StringValue `tfsdk:"contact_email"`
	MspBillingProfileToken        basetypes.StringValue `tfsdk:"msp_billing_profile_token"`
	Name                          basetypes.StringValue `tfsdk:"name"`
	ParentAccountToken            basetypes.StringValue `tfsdk:"parent_account_token"`
	Token                         basetypes.StringValue `tfsdk:"token"`
	state                         attr.ValueState
}

func (v ManagedAccountsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["access_credential_tokens"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["billing_information_attributes"] = basetypes.ObjectType{
		AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["billing_rule_tokens"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["business_information_attributes"] = basetypes.ObjectType{
		AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["contact_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["msp_billing_profile_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["parent_account_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.AccessCredentialTokens.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["access_credential_tokens"] = val

		val, err = v.BillingInformationAttributes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_information_attributes"] = val

		val, err = v.BillingRuleTokens.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_rule_tokens"] = val

		val, err = v.BusinessInformationAttributes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["business_information_attributes"] = val

		val, err = v.ContactEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["contact_email"] = val

		val, err = v.MspBillingProfileToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["msp_billing_profile_token"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.ParentAccountToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["parent_account_token"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ManagedAccountsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ManagedAccountsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ManagedAccountsValue) String() string {
	return "ManagedAccountsValue"
}

func (v ManagedAccountsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var billingInformationAttributes basetypes.ObjectValue

	if v.BillingInformationAttributes.IsNull() {
		billingInformationAttributes = types.ObjectNull(
			BillingInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if v.BillingInformationAttributes.IsUnknown() {
		billingInformationAttributes = types.ObjectUnknown(
			BillingInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.BillingInformationAttributes.IsNull() && !v.BillingInformationAttributes.IsUnknown() {
		billingInformationAttributes = types.ObjectValueMust(
			BillingInformationAttributesValue{}.AttributeTypes(ctx),
			v.BillingInformationAttributes.Attributes(),
		)
	}

	var businessInformationAttributes basetypes.ObjectValue

	if v.BusinessInformationAttributes.IsNull() {
		businessInformationAttributes = types.ObjectNull(
			BusinessInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if v.BusinessInformationAttributes.IsUnknown() {
		businessInformationAttributes = types.ObjectUnknown(
			BusinessInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.BusinessInformationAttributes.IsNull() && !v.BusinessInformationAttributes.IsUnknown() {
		businessInformationAttributes = types.ObjectValueMust(
			BusinessInformationAttributesValue{}.AttributeTypes(ctx),
			v.BusinessInformationAttributes.Attributes(),
		)
	}

	accessCredentialTokensVal, d := types.ListValue(types.StringType, v.AccessCredentialTokens.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"access_credential_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"billing_information_attributes": basetypes.ObjectType{
				AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"billing_rule_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"business_information_attributes": basetypes.ObjectType{
				AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"contact_email":             basetypes.StringType{},
			"msp_billing_profile_token": basetypes.StringType{},
			"name":                      basetypes.StringType{},
			"parent_account_token":      basetypes.StringType{},
			"token":                     basetypes.StringType{},
		}), diags
	}

	billingRuleTokensVal, d := types.ListValue(types.StringType, v.BillingRuleTokens.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"access_credential_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"billing_information_attributes": basetypes.ObjectType{
				AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"billing_rule_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"business_information_attributes": basetypes.ObjectType{
				AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"contact_email":             basetypes.StringType{},
			"msp_billing_profile_token": basetypes.StringType{},
			"name":                      basetypes.StringType{},
			"parent_account_token":      basetypes.StringType{},
			"token":                     basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"access_credential_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"billing_information_attributes": basetypes.ObjectType{
				AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"billing_rule_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"business_information_attributes": basetypes.ObjectType{
				AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"contact_email":             basetypes.StringType{},
			"msp_billing_profile_token": basetypes.StringType{},
			"name":                      basetypes.StringType{},
			"parent_account_token":      basetypes.StringType{},
			"token":                     basetypes.StringType{},
		},
		map[string]attr.Value{
			"access_credential_tokens":        accessCredentialTokensVal,
			"billing_information_attributes":  billingInformationAttributes,
			"billing_rule_tokens":             billingRuleTokensVal,
			"business_information_attributes": businessInformationAttributes,
			"contact_email":                   v.ContactEmail,
			"msp_billing_profile_token":       v.MspBillingProfileToken,
			"name":                            v.Name,
			"parent_account_token":            v.ParentAccountToken,
			"token":                           v.Token,
		})

	return objVal, diags
}

func (v ManagedAccountsValue) Equal(o attr.Value) bool {
	other, ok := o.(ManagedAccountsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccessCredentialTokens.Equal(other.AccessCredentialTokens) {
		return false
	}

	if !v.BillingInformationAttributes.Equal(other.BillingInformationAttributes) {
		return false
	}

	if !v.BillingRuleTokens.Equal(other.BillingRuleTokens) {
		return false
	}

	if !v.BusinessInformationAttributes.Equal(other.BusinessInformationAttributes) {
		return false
	}

	if !v.ContactEmail.Equal(other.ContactEmail) {
		return false
	}

	if !v.MspBillingProfileToken.Equal(other.MspBillingProfileToken) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.ParentAccountToken.Equal(other.ParentAccountToken) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v ManagedAccountsValue) Type(ctx context.Context) attr.Type {
	return ManagedAccountsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ManagedAccountsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"access_credential_tokens": basetypes.ListType{
			ElemType: types.StringType,
		},
		"billing_information_attributes": basetypes.ObjectType{
			AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
		},
		"billing_rule_tokens": basetypes.ListType{
			ElemType: types.StringType,
		},
		"business_information_attributes": basetypes.ObjectType{
			AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
		},
		"contact_email":             basetypes.StringType{},
		"msp_billing_profile_token": basetypes.StringType{},
		"name":                      basetypes.StringType{},
		"parent_account_token":      basetypes.StringType{},
		"token":                     basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BillingInformationAttributesType{}

type BillingInformationAttributesType struct {
	basetypes.ObjectType
}

func (t BillingInformationAttributesType) Equal(o attr.Type) bool {
	other, ok := o.(BillingInformationAttributesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BillingInformationAttributesType) String() string {
	return "BillingInformationAttributesType"
}

func (t BillingInformationAttributesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	addressLine1Attribute, ok := attributes["address_line_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_1 is missing from object`)

		return nil, diags
	}

	addressLine1Val, ok := addressLine1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_1 expected to be basetypes.StringValue, was: %T`, addressLine1Attribute))
	}

	addressLine2Attribute, ok := attributes["address_line_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_2 is missing from object`)

		return nil, diags
	}

	addressLine2Val, ok := addressLine2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_2 expected to be basetypes.StringValue, was: %T`, addressLine2Attribute))
	}

	billingEmailAttribute, ok := attributes["billing_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_email is missing from object`)

		return nil, diags
	}

	billingEmailVal, ok := billingEmailAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_email expected to be basetypes.ListValue, was: %T`, billingEmailAttribute))
	}

	cityAttribute, ok := attributes["city"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`city is missing from object`)

		return nil, diags
	}

	cityVal, ok := cityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`city expected to be basetypes.StringValue, was: %T`, cityAttribute))
	}

	companyNameAttribute, ok := attributes["company_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_name is missing from object`)

		return nil, diags
	}

	companyNameVal, ok := companyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_name expected to be basetypes.StringValue, was: %T`, companyNameAttribute))
	}

	countryCodeAttribute, ok := attributes["country_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_code is missing from object`)

		return nil, diags
	}

	countryCodeVal, ok := countryCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_code expected to be basetypes.StringValue, was: %T`, countryCodeAttribute))
	}

	postalCodeAttribute, ok := attributes["postal_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`postal_code is missing from object`)

		return nil, diags
	}

	postalCodeVal, ok := postalCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`postal_code expected to be basetypes.StringValue, was: %T`, postalCodeAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BillingInformationAttributesValue{
		AddressLine1: addressLine1Val,
		AddressLine2: addressLine2Val,
		BillingEmail: billingEmailVal,
		City:         cityVal,
		CompanyName:  companyNameVal,
		CountryCode:  countryCodeVal,
		PostalCode:   postalCodeVal,
		State:        stateVal,
		Token:        tokenVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewBillingInformationAttributesValueNull() BillingInformationAttributesValue {
	return BillingInformationAttributesValue{
		state: attr.ValueStateNull,
	}
}

func NewBillingInformationAttributesValueUnknown() BillingInformationAttributesValue {
	return BillingInformationAttributesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBillingInformationAttributesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BillingInformationAttributesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BillingInformationAttributesValue Attribute Value",
				"While creating a BillingInformationAttributesValue value, a missing attribute value was detected. "+
					"A BillingInformationAttributesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingInformationAttributesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BillingInformationAttributesValue Attribute Type",
				"While creating a BillingInformationAttributesValue value, an invalid attribute value was detected. "+
					"A BillingInformationAttributesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingInformationAttributesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BillingInformationAttributesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BillingInformationAttributesValue Attribute Value",
				"While creating a BillingInformationAttributesValue value, an extra attribute value was detected. "+
					"A BillingInformationAttributesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BillingInformationAttributesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBillingInformationAttributesValueUnknown(), diags
	}

	addressLine1Attribute, ok := attributes["address_line_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_1 is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	addressLine1Val, ok := addressLine1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_1 expected to be basetypes.StringValue, was: %T`, addressLine1Attribute))
	}

	addressLine2Attribute, ok := attributes["address_line_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_2 is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	addressLine2Val, ok := addressLine2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_2 expected to be basetypes.StringValue, was: %T`, addressLine2Attribute))
	}

	billingEmailAttribute, ok := attributes["billing_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_email is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	billingEmailVal, ok := billingEmailAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_email expected to be basetypes.ListValue, was: %T`, billingEmailAttribute))
	}

	cityAttribute, ok := attributes["city"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`city is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	cityVal, ok := cityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`city expected to be basetypes.StringValue, was: %T`, cityAttribute))
	}

	companyNameAttribute, ok := attributes["company_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_name is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	companyNameVal, ok := companyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_name expected to be basetypes.StringValue, was: %T`, companyNameAttribute))
	}

	countryCodeAttribute, ok := attributes["country_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_code is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	countryCodeVal, ok := countryCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_code expected to be basetypes.StringValue, was: %T`, countryCodeAttribute))
	}

	postalCodeAttribute, ok := attributes["postal_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`postal_code is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	postalCodeVal, ok := postalCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`postal_code expected to be basetypes.StringValue, was: %T`, postalCodeAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewBillingInformationAttributesValueUnknown(), diags
	}

	return BillingInformationAttributesValue{
		AddressLine1: addressLine1Val,
		AddressLine2: addressLine2Val,
		BillingEmail: billingEmailVal,
		City:         cityVal,
		CompanyName:  companyNameVal,
		CountryCode:  countryCodeVal,
		PostalCode:   postalCodeVal,
		State:        stateVal,
		Token:        tokenVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewBillingInformationAttributesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BillingInformationAttributesValue {
	object, diags := NewBillingInformationAttributesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBillingInformationAttributesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BillingInformationAttributesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBillingInformationAttributesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBillingInformationAttributesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBillingInformationAttributesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBillingInformationAttributesValueMust(BillingInformationAttributesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BillingInformationAttributesType) ValueType(ctx context.Context) attr.Value {
	return BillingInformationAttributesValue{}
}

var _ basetypes.ObjectValuable = BillingInformationAttributesValue{}

type BillingInformationAttributesValue struct {
	AddressLine1 basetypes.StringValue `tfsdk:"address_line_1"`
	AddressLine2 basetypes.StringValue `tfsdk:"address_line_2"`
	BillingEmail basetypes.ListValue   `tfsdk:"billing_email"`
	City         basetypes.StringValue `tfsdk:"city"`
	CompanyName  basetypes.StringValue `tfsdk:"company_name"`
	CountryCode  basetypes.StringValue `tfsdk:"country_code"`
	PostalCode   basetypes.StringValue `tfsdk:"postal_code"`
	State        basetypes.StringValue `tfsdk:"state"`
	Token        basetypes.StringValue `tfsdk:"token"`
	state        attr.ValueState
}

func (v BillingInformationAttributesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["address_line_1"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["address_line_2"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["billing_email"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["city"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["company_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["country_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["postal_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.AddressLine1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["address_line_1"] = val

		val, err = v.AddressLine2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["address_line_2"] = val

		val, err = v.BillingEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_email"] = val

		val, err = v.City.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["city"] = val

		val, err = v.CompanyName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company_name"] = val

		val, err = v.CountryCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country_code"] = val

		val, err = v.PostalCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["postal_code"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BillingInformationAttributesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BillingInformationAttributesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BillingInformationAttributesValue) String() string {
	return "BillingInformationAttributesValue"
}

func (v BillingInformationAttributesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	billingEmailVal, d := types.ListValue(types.StringType, v.BillingEmail.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"address_line_1": basetypes.StringType{},
			"address_line_2": basetypes.StringType{},
			"billing_email": basetypes.ListType{
				ElemType: types.StringType,
			},
			"city":         basetypes.StringType{},
			"company_name": basetypes.StringType{},
			"country_code": basetypes.StringType{},
			"postal_code":  basetypes.StringType{},
			"state":        basetypes.StringType{},
			"token":        basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"address_line_1": basetypes.StringType{},
			"address_line_2": basetypes.StringType{},
			"billing_email": basetypes.ListType{
				ElemType: types.StringType,
			},
			"city":         basetypes.StringType{},
			"company_name": basetypes.StringType{},
			"country_code": basetypes.StringType{},
			"postal_code":  basetypes.StringType{},
			"state":        basetypes.StringType{},
			"token":        basetypes.StringType{},
		},
		map[string]attr.Value{
			"address_line_1": v.AddressLine1,
			"address_line_2": v.AddressLine2,
			"billing_email":  billingEmailVal,
			"city":           v.City,
			"company_name":   v.CompanyName,
			"country_code":   v.CountryCode,
			"postal_code":    v.PostalCode,
			"state":          v.State,
			"token":          v.Token,
		})

	return objVal, diags
}

func (v BillingInformationAttributesValue) Equal(o attr.Value) bool {
	other, ok := o.(BillingInformationAttributesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AddressLine1.Equal(other.AddressLine1) {
		return false
	}

	if !v.AddressLine2.Equal(other.AddressLine2) {
		return false
	}

	if !v.BillingEmail.Equal(other.BillingEmail) {
		return false
	}

	if !v.City.Equal(other.City) {
		return false
	}

	if !v.CompanyName.Equal(other.CompanyName) {
		return false
	}

	if !v.CountryCode.Equal(other.CountryCode) {
		return false
	}

	if !v.PostalCode.Equal(other.PostalCode) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v BillingInformationAttributesValue) Type(ctx context.Context) attr.Type {
	return BillingInformationAttributesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BillingInformationAttributesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"address_line_1": basetypes.StringType{},
		"address_line_2": basetypes.StringType{},
		"billing_email": basetypes.ListType{
			ElemType: types.StringType,
		},
		"city":         basetypes.StringType{},
		"company_name": basetypes.StringType{},
		"country_code": basetypes.StringType{},
		"postal_code":  basetypes.StringType{},
		"state":        basetypes.StringType{},
		"token":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BusinessInformationAttributesType{}

type BusinessInformationAttributesType struct {
	basetypes.ObjectType
}

func (t BusinessInformationAttributesType) Equal(o attr.Type) bool {
	other, ok := o.(BusinessInformationAttributesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BusinessInformationAttributesType) String() string {
	return "BusinessInformationAttributesType"
}

func (t BusinessInformationAttributesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return nil, diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BusinessInformationAttributesValue{
		Metadata: metadataVal,
		Token:    tokenVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewBusinessInformationAttributesValueNull() BusinessInformationAttributesValue {
	return BusinessInformationAttributesValue{
		state: attr.ValueStateNull,
	}
}

func NewBusinessInformationAttributesValueUnknown() BusinessInformationAttributesValue {
	return BusinessInformationAttributesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBusinessInformationAttributesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BusinessInformationAttributesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BusinessInformationAttributesValue Attribute Value",
				"While creating a BusinessInformationAttributesValue value, a missing attribute value was detected. "+
					"A BusinessInformationAttributesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BusinessInformationAttributesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BusinessInformationAttributesValue Attribute Type",
				"While creating a BusinessInformationAttributesValue value, an invalid attribute value was detected. "+
					"A BusinessInformationAttributesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BusinessInformationAttributesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BusinessInformationAttributesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BusinessInformationAttributesValue Attribute Value",
				"While creating a BusinessInformationAttributesValue value, an extra attribute value was detected. "+
					"A BusinessInformationAttributesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BusinessInformationAttributesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	return BusinessInformationAttributesValue{
		Metadata: metadataVal,
		Token:    tokenVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewBusinessInformationAttributesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BusinessInformationAttributesValue {
	object, diags := NewBusinessInformationAttributesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBusinessInformationAttributesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BusinessInformationAttributesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBusinessInformationAttributesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBusinessInformationAttributesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBusinessInformationAttributesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBusinessInformationAttributesValueMust(BusinessInformationAttributesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BusinessInformationAttributesType) ValueType(ctx context.Context) attr.Value {
	return BusinessInformationAttributesValue{}
}

var _ basetypes.ObjectValuable = BusinessInformationAttributesValue{}

type BusinessInformationAttributesValue struct {
	Metadata basetypes.ObjectValue `tfsdk:"metadata"`
	Token    basetypes.StringValue `tfsdk:"token"`
	state    attr.ValueState
}

func (v BusinessInformationAttributesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["metadata"] = basetypes.ObjectType{
		AttrTypes: MetadataValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Metadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metadata"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BusinessInformationAttributesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BusinessInformationAttributesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BusinessInformationAttributesValue) String() string {
	return "BusinessInformationAttributesValue"
}

func (v BusinessInformationAttributesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var metadata basetypes.ObjectValue

	if v.Metadata.IsNull() {
		metadata = types.ObjectNull(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if v.Metadata.IsUnknown() {
		metadata = types.ObjectUnknown(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Metadata.IsNull() && !v.Metadata.IsUnknown() {
		metadata = types.ObjectValueMust(
			MetadataValue{}.AttributeTypes(ctx),
			v.Metadata.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"metadata": basetypes.ObjectType{
				AttrTypes: MetadataValue{}.AttributeTypes(ctx),
			},
			"token": basetypes.StringType{},
		},
		map[string]attr.Value{
			"metadata": metadata,
			"token":    v.Token,
		})

	return objVal, diags
}

func (v BusinessInformationAttributesValue) Equal(o attr.Value) bool {
	other, ok := o.(BusinessInformationAttributesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Metadata.Equal(other.Metadata) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v BusinessInformationAttributesValue) Type(ctx context.Context) attr.Type {
	return BusinessInformationAttributesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BusinessInformationAttributesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"metadata": basetypes.ObjectType{
			AttrTypes: MetadataValue{}.AttributeTypes(ctx),
		},
		"token": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return nil, diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.ListValue, was: %T`, customFieldsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		CustomFields: customFieldsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.ListValue, was: %T`, customFieldsAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		CustomFields: customFieldsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	CustomFields basetypes.ListValue `tfsdk:"custom_fields"`
	state        attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["custom_fields"] = basetypes.ListType{
		ElemType: CustomFieldsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.CustomFields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_fields"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	customFields := types.ListValueMust(
		CustomFieldsType{
			basetypes.ObjectType{
				AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
			},
		},
		v.CustomFields.Elements(),
	)

	if v.CustomFields.IsNull() {
		customFields = types.ListNull(
			CustomFieldsType{
				basetypes.ObjectType{
					AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.CustomFields.IsUnknown() {
		customFields = types.ListUnknown(
			CustomFieldsType{
				basetypes.ObjectType{
					AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"custom_fields": basetypes.ListType{
				ElemType: CustomFieldsValue{}.Type(ctx),
			},
		},
		map[string]attr.Value{
			"custom_fields": customFields,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CustomFields.Equal(other.CustomFields) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"custom_fields": basetypes.ListType{
			ElemType: CustomFieldsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = CustomFieldsType{}

type CustomFieldsType struct {
	basetypes.ObjectType
}

func (t CustomFieldsType) Equal(o attr.Type) bool {
	other, ok := o.(CustomFieldsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CustomFieldsType) String() string {
	return "CustomFieldsType"
}

func (t CustomFieldsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CustomFieldsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldsValueNull() CustomFieldsValue {
	return CustomFieldsValue{
		state: attr.ValueStateNull,
	}
}

func NewCustomFieldsValueUnknown() CustomFieldsValue {
	return CustomFieldsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCustomFieldsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CustomFieldsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CustomFieldsValue Attribute Value",
				"While creating a CustomFieldsValue value, a missing attribute value was detected. "+
					"A CustomFieldsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CustomFieldsValue Attribute Type",
				"While creating a CustomFieldsValue value, an invalid attribute value was detected. "+
					"A CustomFieldsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CustomFieldsValue Attribute Value",
				"While creating a CustomFieldsValue value, an extra attribute value was detected. "+
					"A CustomFieldsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CustomFieldsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCustomFieldsValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCustomFieldsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewCustomFieldsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewCustomFieldsValueUnknown(), diags
	}

	return CustomFieldsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CustomFieldsValue {
	object, diags := NewCustomFieldsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCustomFieldsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CustomFieldsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCustomFieldsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCustomFieldsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCustomFieldsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCustomFieldsValueMust(CustomFieldsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CustomFieldsType) ValueType(ctx context.Context) attr.Value {
	return CustomFieldsValue{}
}

var _ basetypes.ObjectValuable = CustomFieldsValue{}

type CustomFieldsValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v CustomFieldsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CustomFieldsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CustomFieldsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CustomFieldsValue) String() string {
	return "CustomFieldsValue"
}

func (v CustomFieldsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name":  basetypes.StringType{},
			"value": basetypes.StringType{},
		},
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v CustomFieldsValue) Equal(o attr.Value) bool {
	other, ok := o.(CustomFieldsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v CustomFieldsValue) Type(ctx context.Context) attr.Type {
	return CustomFieldsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CustomFieldsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
