// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_team

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func TeamResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The description of the Team.",
				MarkdownDescription: "The description of the Team.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id of the team",
				MarkdownDescription: "The id of the team",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Team.",
				MarkdownDescription: "The name of the Team.",
			},
			"role": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The role to assign to the provided Users. Defaults to 'editor' which has editor permissions.",
				MarkdownDescription: "The role to assign to the provided Users. Defaults to 'editor' which has editor permissions.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"owner",
						"editor",
						"viewer",
					),
				},
			},
			"token": schema.StringAttribute{
				Computed:            true,
				Description:         "The token of the team",
				MarkdownDescription: "The token of the team",
			},
			"user_emails": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The User emails to associate to the Team.",
				MarkdownDescription: "The User emails to associate to the Team.",
			},
			"user_tokens": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The User tokens to associate to the Team.",
				MarkdownDescription: "The User tokens to associate to the Team.",
			},
			"workspace_tokens": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The Workspace tokens to associate to the Team.",
				MarkdownDescription: "The Workspace tokens to associate to the Team.",
			},
		},
	}
}

type TeamModel struct {
	Description     types.String `tfsdk:"description"`
	Id              types.String `tfsdk:"id"`
	Name            types.String `tfsdk:"name"`
	Role            types.String `tfsdk:"role"`
	Token           types.String `tfsdk:"token"`
	UserEmails      types.List   `tfsdk:"user_emails"`
	UserTokens      types.List   `tfsdk:"user_tokens"`
	WorkspaceTokens types.List   `tfsdk:"workspace_tokens"`
}
