// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_billing_profiles

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func BillingProfilesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"billing_profiles": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"banking_information_attributes": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"bank_name": schema.StringAttribute{
									Computed:            true,
									Description:         "Name of the bank",
									MarkdownDescription: "Name of the bank",
								},
								"beneficiary_name": schema.StringAttribute{
									Computed:            true,
									Description:         "Name of the account beneficiary",
									MarkdownDescription: "Name of the account beneficiary",
								},
								"secure_data": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"account_number": schema.StringAttribute{
											Computed:            true,
											Description:         "Bank account number (US)",
											MarkdownDescription: "Bank account number (US)",
										},
										"iban": schema.StringAttribute{
											Computed:            true,
											Description:         "International Bank Account Number (EU)",
											MarkdownDescription: "International Bank Account Number (EU)",
										},
										"routing_number": schema.StringAttribute{
											Computed:            true,
											Description:         "Bank routing number (US)",
											MarkdownDescription: "Bank routing number (US)",
										},
										"swift_bic": schema.StringAttribute{
											Computed:            true,
											Description:         "SWIFT/BIC code (EU)",
											MarkdownDescription: "SWIFT/BIC code (EU)",
										},
									},
									CustomType: SecureDataType{
										ObjectType: types.ObjectType{
											AttrTypes: SecureDataValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"tax_id": schema.StringAttribute{
									Computed:            true,
									Description:         "Tax identification number",
									MarkdownDescription: "Tax identification number",
								},
								"token": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: BankingInformationAttributesType{
								ObjectType: types.ObjectType{
									AttrTypes: BankingInformationAttributesValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"billing_information_attributes": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"address_line_1": schema.StringAttribute{
									Computed:            true,
									Description:         "First line of billing address",
									MarkdownDescription: "First line of billing address",
								},
								"address_line_2": schema.StringAttribute{
									Computed:            true,
									Description:         "Second line of billing address",
									MarkdownDescription: "Second line of billing address",
								},
								"billing_email": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "Array of billing email addresses",
									MarkdownDescription: "Array of billing email addresses",
								},
								"city": schema.StringAttribute{
									Computed:            true,
									Description:         "City for billing address",
									MarkdownDescription: "City for billing address",
								},
								"company_name": schema.StringAttribute{
									Computed:            true,
									Description:         "Company name for billing",
									MarkdownDescription: "Company name for billing",
								},
								"country_code": schema.StringAttribute{
									Computed:            true,
									Description:         "ISO country code",
									MarkdownDescription: "ISO country code",
								},
								"postal_code": schema.StringAttribute{
									Computed:            true,
									Description:         "Postal or ZIP code",
									MarkdownDescription: "Postal or ZIP code",
								},
								"state": schema.StringAttribute{
									Computed:            true,
									Description:         "State or province for billing address",
									MarkdownDescription: "State or province for billing address",
								},
								"token": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: BillingInformationAttributesType{
								ObjectType: types.ObjectType{
									AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"business_information_attributes": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"metadata": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"custom_fields": schema.ListNestedAttribute{
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														Computed:            true,
														Description:         "Custom field name",
														MarkdownDescription: "Custom field name",
													},
													"value": schema.StringAttribute{
														Computed:            true,
														Description:         "Custom field value",
														MarkdownDescription: "Custom field value",
													},
												},
												CustomType: CustomFieldsType{
													ObjectType: types.ObjectType{
														AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
													},
												},
											},
											Computed:            true,
											Description:         "Array of custom field objects",
											MarkdownDescription: "Array of custom field objects",
										},
									},
									CustomType: MetadataType{
										ObjectType: types.ObjectType{
											AttrTypes: MetadataValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"token": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: BusinessInformationAttributesType{
								ObjectType: types.ObjectType{
									AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the billing profile was created. ISO 8601 formatted.",
							MarkdownDescription: "The date and time, in UTC, the billing profile was created. ISO 8601 formatted.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The id of the resource",
							MarkdownDescription: "The id of the resource",
						},
						"managed_accounts_count": schema.StringAttribute{
							Computed:            true,
							Description:         "Number of managed accounts using this billing profile",
							MarkdownDescription: "Number of managed accounts using this billing profile",
						},
						"nickname": schema.StringAttribute{
							Computed:            true,
							Description:         "Display name for the billing profile",
							MarkdownDescription: "Display name for the billing profile",
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the billing profile was last updated. ISO 8601 formatted.",
							MarkdownDescription: "The date and time, in UTC, the billing profile was last updated. ISO 8601 formatted.",
						},
					},
					CustomType: BillingProfilesType{
						ObjectType: types.ObjectType{
							AttrTypes: BillingProfilesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type BillingProfilesModel struct {
	BillingProfiles types.List `tfsdk:"billing_profiles"`
}

var _ basetypes.ObjectTypable = BillingProfilesType{}

type BillingProfilesType struct {
	basetypes.ObjectType
}

func (t BillingProfilesType) Equal(o attr.Type) bool {
	other, ok := o.(BillingProfilesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BillingProfilesType) String() string {
	return "BillingProfilesType"
}

func (t BillingProfilesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bankingInformationAttributesAttribute, ok := attributes["banking_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`banking_information_attributes is missing from object`)

		return nil, diags
	}

	bankingInformationAttributesVal, ok := bankingInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`banking_information_attributes expected to be basetypes.ObjectValue, was: %T`, bankingInformationAttributesAttribute))
	}

	billingInformationAttributesAttribute, ok := attributes["billing_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_information_attributes is missing from object`)

		return nil, diags
	}

	billingInformationAttributesVal, ok := billingInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_information_attributes expected to be basetypes.ObjectValue, was: %T`, billingInformationAttributesAttribute))
	}

	businessInformationAttributesAttribute, ok := attributes["business_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`business_information_attributes is missing from object`)

		return nil, diags
	}

	businessInformationAttributesVal, ok := businessInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`business_information_attributes expected to be basetypes.ObjectValue, was: %T`, businessInformationAttributesAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	managedAccountsCountAttribute, ok := attributes["managed_accounts_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`managed_accounts_count is missing from object`)

		return nil, diags
	}

	managedAccountsCountVal, ok := managedAccountsCountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`managed_accounts_count expected to be basetypes.StringValue, was: %T`, managedAccountsCountAttribute))
	}

	nicknameAttribute, ok := attributes["nickname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nickname is missing from object`)

		return nil, diags
	}

	nicknameVal, ok := nicknameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nickname expected to be basetypes.StringValue, was: %T`, nicknameAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BillingProfilesValue{
		BankingInformationAttributes:  bankingInformationAttributesVal,
		BillingInformationAttributes:  billingInformationAttributesVal,
		BusinessInformationAttributes: businessInformationAttributesVal,
		CreatedAt:                     createdAtVal,
		Id:                            idVal,
		ManagedAccountsCount:          managedAccountsCountVal,
		Nickname:                      nicknameVal,
		Token:                         tokenVal,
		UpdatedAt:                     updatedAtVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewBillingProfilesValueNull() BillingProfilesValue {
	return BillingProfilesValue{
		state: attr.ValueStateNull,
	}
}

func NewBillingProfilesValueUnknown() BillingProfilesValue {
	return BillingProfilesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBillingProfilesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BillingProfilesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BillingProfilesValue Attribute Value",
				"While creating a BillingProfilesValue value, a missing attribute value was detected. "+
					"A BillingProfilesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingProfilesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BillingProfilesValue Attribute Type",
				"While creating a BillingProfilesValue value, an invalid attribute value was detected. "+
					"A BillingProfilesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingProfilesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BillingProfilesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BillingProfilesValue Attribute Value",
				"While creating a BillingProfilesValue value, an extra attribute value was detected. "+
					"A BillingProfilesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BillingProfilesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBillingProfilesValueUnknown(), diags
	}

	bankingInformationAttributesAttribute, ok := attributes["banking_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`banking_information_attributes is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	bankingInformationAttributesVal, ok := bankingInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`banking_information_attributes expected to be basetypes.ObjectValue, was: %T`, bankingInformationAttributesAttribute))
	}

	billingInformationAttributesAttribute, ok := attributes["billing_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_information_attributes is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	billingInformationAttributesVal, ok := billingInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_information_attributes expected to be basetypes.ObjectValue, was: %T`, billingInformationAttributesAttribute))
	}

	businessInformationAttributesAttribute, ok := attributes["business_information_attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`business_information_attributes is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	businessInformationAttributesVal, ok := businessInformationAttributesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`business_information_attributes expected to be basetypes.ObjectValue, was: %T`, businessInformationAttributesAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	managedAccountsCountAttribute, ok := attributes["managed_accounts_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`managed_accounts_count is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	managedAccountsCountVal, ok := managedAccountsCountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`managed_accounts_count expected to be basetypes.StringValue, was: %T`, managedAccountsCountAttribute))
	}

	nicknameAttribute, ok := attributes["nickname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nickname is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	nicknameVal, ok := nicknameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nickname expected to be basetypes.StringValue, was: %T`, nicknameAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewBillingProfilesValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewBillingProfilesValueUnknown(), diags
	}

	return BillingProfilesValue{
		BankingInformationAttributes:  bankingInformationAttributesVal,
		BillingInformationAttributes:  billingInformationAttributesVal,
		BusinessInformationAttributes: businessInformationAttributesVal,
		CreatedAt:                     createdAtVal,
		Id:                            idVal,
		ManagedAccountsCount:          managedAccountsCountVal,
		Nickname:                      nicknameVal,
		Token:                         tokenVal,
		UpdatedAt:                     updatedAtVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewBillingProfilesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BillingProfilesValue {
	object, diags := NewBillingProfilesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBillingProfilesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BillingProfilesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBillingProfilesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBillingProfilesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBillingProfilesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBillingProfilesValueMust(BillingProfilesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BillingProfilesType) ValueType(ctx context.Context) attr.Value {
	return BillingProfilesValue{}
}

var _ basetypes.ObjectValuable = BillingProfilesValue{}

type BillingProfilesValue struct {
	BankingInformationAttributes  basetypes.ObjectValue `tfsdk:"banking_information_attributes"`
	BillingInformationAttributes  basetypes.ObjectValue `tfsdk:"billing_information_attributes"`
	BusinessInformationAttributes basetypes.ObjectValue `tfsdk:"business_information_attributes"`
	CreatedAt                     basetypes.StringValue `tfsdk:"created_at"`
	Id                            basetypes.StringValue `tfsdk:"id"`
	ManagedAccountsCount          basetypes.StringValue `tfsdk:"managed_accounts_count"`
	Nickname                      basetypes.StringValue `tfsdk:"nickname"`
	Token                         basetypes.StringValue `tfsdk:"token"`
	UpdatedAt                     basetypes.StringValue `tfsdk:"updated_at"`
	state                         attr.ValueState
}

func (v BillingProfilesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["banking_information_attributes"] = basetypes.ObjectType{
		AttrTypes: BankingInformationAttributesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["billing_information_attributes"] = basetypes.ObjectType{
		AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["business_information_attributes"] = basetypes.ObjectType{
		AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["managed_accounts_count"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nickname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.BankingInformationAttributes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["banking_information_attributes"] = val

		val, err = v.BillingInformationAttributes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_information_attributes"] = val

		val, err = v.BusinessInformationAttributes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["business_information_attributes"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.ManagedAccountsCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["managed_accounts_count"] = val

		val, err = v.Nickname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nickname"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BillingProfilesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BillingProfilesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BillingProfilesValue) String() string {
	return "BillingProfilesValue"
}

func (v BillingProfilesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var bankingInformationAttributes basetypes.ObjectValue

	if v.BankingInformationAttributes.IsNull() {
		bankingInformationAttributes = types.ObjectNull(
			BankingInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if v.BankingInformationAttributes.IsUnknown() {
		bankingInformationAttributes = types.ObjectUnknown(
			BankingInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.BankingInformationAttributes.IsNull() && !v.BankingInformationAttributes.IsUnknown() {
		bankingInformationAttributes = types.ObjectValueMust(
			BankingInformationAttributesValue{}.AttributeTypes(ctx),
			v.BankingInformationAttributes.Attributes(),
		)
	}

	var billingInformationAttributes basetypes.ObjectValue

	if v.BillingInformationAttributes.IsNull() {
		billingInformationAttributes = types.ObjectNull(
			BillingInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if v.BillingInformationAttributes.IsUnknown() {
		billingInformationAttributes = types.ObjectUnknown(
			BillingInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.BillingInformationAttributes.IsNull() && !v.BillingInformationAttributes.IsUnknown() {
		billingInformationAttributes = types.ObjectValueMust(
			BillingInformationAttributesValue{}.AttributeTypes(ctx),
			v.BillingInformationAttributes.Attributes(),
		)
	}

	var businessInformationAttributes basetypes.ObjectValue

	if v.BusinessInformationAttributes.IsNull() {
		businessInformationAttributes = types.ObjectNull(
			BusinessInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if v.BusinessInformationAttributes.IsUnknown() {
		businessInformationAttributes = types.ObjectUnknown(
			BusinessInformationAttributesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.BusinessInformationAttributes.IsNull() && !v.BusinessInformationAttributes.IsUnknown() {
		businessInformationAttributes = types.ObjectValueMust(
			BusinessInformationAttributesValue{}.AttributeTypes(ctx),
			v.BusinessInformationAttributes.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"banking_information_attributes": basetypes.ObjectType{
				AttrTypes: BankingInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"billing_information_attributes": basetypes.ObjectType{
				AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"business_information_attributes": basetypes.ObjectType{
				AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
			},
			"created_at":             basetypes.StringType{},
			"id":                     basetypes.StringType{},
			"managed_accounts_count": basetypes.StringType{},
			"nickname":               basetypes.StringType{},
			"token":                  basetypes.StringType{},
			"updated_at":             basetypes.StringType{},
		},
		map[string]attr.Value{
			"banking_information_attributes":  bankingInformationAttributes,
			"billing_information_attributes":  billingInformationAttributes,
			"business_information_attributes": businessInformationAttributes,
			"created_at":                      v.CreatedAt,
			"id":                              v.Id,
			"managed_accounts_count":          v.ManagedAccountsCount,
			"nickname":                        v.Nickname,
			"token":                           v.Token,
			"updated_at":                      v.UpdatedAt,
		})

	return objVal, diags
}

func (v BillingProfilesValue) Equal(o attr.Value) bool {
	other, ok := o.(BillingProfilesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BankingInformationAttributes.Equal(other.BankingInformationAttributes) {
		return false
	}

	if !v.BillingInformationAttributes.Equal(other.BillingInformationAttributes) {
		return false
	}

	if !v.BusinessInformationAttributes.Equal(other.BusinessInformationAttributes) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.ManagedAccountsCount.Equal(other.ManagedAccountsCount) {
		return false
	}

	if !v.Nickname.Equal(other.Nickname) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v BillingProfilesValue) Type(ctx context.Context) attr.Type {
	return BillingProfilesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BillingProfilesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"banking_information_attributes": basetypes.ObjectType{
			AttrTypes: BankingInformationAttributesValue{}.AttributeTypes(ctx),
		},
		"billing_information_attributes": basetypes.ObjectType{
			AttrTypes: BillingInformationAttributesValue{}.AttributeTypes(ctx),
		},
		"business_information_attributes": basetypes.ObjectType{
			AttrTypes: BusinessInformationAttributesValue{}.AttributeTypes(ctx),
		},
		"created_at":             basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"managed_accounts_count": basetypes.StringType{},
		"nickname":               basetypes.StringType{},
		"token":                  basetypes.StringType{},
		"updated_at":             basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BankingInformationAttributesType{}

type BankingInformationAttributesType struct {
	basetypes.ObjectType
}

func (t BankingInformationAttributesType) Equal(o attr.Type) bool {
	other, ok := o.(BankingInformationAttributesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BankingInformationAttributesType) String() string {
	return "BankingInformationAttributesType"
}

func (t BankingInformationAttributesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bankNameAttribute, ok := attributes["bank_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bank_name is missing from object`)

		return nil, diags
	}

	bankNameVal, ok := bankNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bank_name expected to be basetypes.StringValue, was: %T`, bankNameAttribute))
	}

	beneficiaryNameAttribute, ok := attributes["beneficiary_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`beneficiary_name is missing from object`)

		return nil, diags
	}

	beneficiaryNameVal, ok := beneficiaryNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`beneficiary_name expected to be basetypes.StringValue, was: %T`, beneficiaryNameAttribute))
	}

	secureDataAttribute, ok := attributes["secure_data"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secure_data is missing from object`)

		return nil, diags
	}

	secureDataVal, ok := secureDataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secure_data expected to be basetypes.ObjectValue, was: %T`, secureDataAttribute))
	}

	taxIdAttribute, ok := attributes["tax_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tax_id is missing from object`)

		return nil, diags
	}

	taxIdVal, ok := taxIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tax_id expected to be basetypes.StringValue, was: %T`, taxIdAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BankingInformationAttributesValue{
		BankName:        bankNameVal,
		BeneficiaryName: beneficiaryNameVal,
		SecureData:      secureDataVal,
		TaxId:           taxIdVal,
		Token:           tokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewBankingInformationAttributesValueNull() BankingInformationAttributesValue {
	return BankingInformationAttributesValue{
		state: attr.ValueStateNull,
	}
}

func NewBankingInformationAttributesValueUnknown() BankingInformationAttributesValue {
	return BankingInformationAttributesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBankingInformationAttributesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BankingInformationAttributesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BankingInformationAttributesValue Attribute Value",
				"While creating a BankingInformationAttributesValue value, a missing attribute value was detected. "+
					"A BankingInformationAttributesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BankingInformationAttributesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BankingInformationAttributesValue Attribute Type",
				"While creating a BankingInformationAttributesValue value, an invalid attribute value was detected. "+
					"A BankingInformationAttributesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BankingInformationAttributesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BankingInformationAttributesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BankingInformationAttributesValue Attribute Value",
				"While creating a BankingInformationAttributesValue value, an extra attribute value was detected. "+
					"A BankingInformationAttributesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BankingInformationAttributesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBankingInformationAttributesValueUnknown(), diags
	}

	bankNameAttribute, ok := attributes["bank_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bank_name is missing from object`)

		return NewBankingInformationAttributesValueUnknown(), diags
	}

	bankNameVal, ok := bankNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bank_name expected to be basetypes.StringValue, was: %T`, bankNameAttribute))
	}

	beneficiaryNameAttribute, ok := attributes["beneficiary_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`beneficiary_name is missing from object`)

		return NewBankingInformationAttributesValueUnknown(), diags
	}

	beneficiaryNameVal, ok := beneficiaryNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`beneficiary_name expected to be basetypes.StringValue, was: %T`, beneficiaryNameAttribute))
	}

	secureDataAttribute, ok := attributes["secure_data"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secure_data is missing from object`)

		return NewBankingInformationAttributesValueUnknown(), diags
	}

	secureDataVal, ok := secureDataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secure_data expected to be basetypes.ObjectValue, was: %T`, secureDataAttribute))
	}

	taxIdAttribute, ok := attributes["tax_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tax_id is missing from object`)

		return NewBankingInformationAttributesValueUnknown(), diags
	}

	taxIdVal, ok := taxIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tax_id expected to be basetypes.StringValue, was: %T`, taxIdAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBankingInformationAttributesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewBankingInformationAttributesValueUnknown(), diags
	}

	return BankingInformationAttributesValue{
		BankName:        bankNameVal,
		BeneficiaryName: beneficiaryNameVal,
		SecureData:      secureDataVal,
		TaxId:           taxIdVal,
		Token:           tokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewBankingInformationAttributesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BankingInformationAttributesValue {
	object, diags := NewBankingInformationAttributesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBankingInformationAttributesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BankingInformationAttributesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBankingInformationAttributesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBankingInformationAttributesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBankingInformationAttributesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBankingInformationAttributesValueMust(BankingInformationAttributesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BankingInformationAttributesType) ValueType(ctx context.Context) attr.Value {
	return BankingInformationAttributesValue{}
}

var _ basetypes.ObjectValuable = BankingInformationAttributesValue{}

type BankingInformationAttributesValue struct {
	BankName        basetypes.StringValue `tfsdk:"bank_name"`
	BeneficiaryName basetypes.StringValue `tfsdk:"beneficiary_name"`
	SecureData      basetypes.ObjectValue `tfsdk:"secure_data"`
	TaxId           basetypes.StringValue `tfsdk:"tax_id"`
	Token           basetypes.StringValue `tfsdk:"token"`
	state           attr.ValueState
}

func (v BankingInformationAttributesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["bank_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["beneficiary_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["secure_data"] = basetypes.ObjectType{
		AttrTypes: SecureDataValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["tax_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.BankName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bank_name"] = val

		val, err = v.BeneficiaryName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["beneficiary_name"] = val

		val, err = v.SecureData.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["secure_data"] = val

		val, err = v.TaxId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tax_id"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BankingInformationAttributesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BankingInformationAttributesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BankingInformationAttributesValue) String() string {
	return "BankingInformationAttributesValue"
}

func (v BankingInformationAttributesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var secureData basetypes.ObjectValue

	if v.SecureData.IsNull() {
		secureData = types.ObjectNull(
			SecureDataValue{}.AttributeTypes(ctx),
		)
	}

	if v.SecureData.IsUnknown() {
		secureData = types.ObjectUnknown(
			SecureDataValue{}.AttributeTypes(ctx),
		)
	}

	if !v.SecureData.IsNull() && !v.SecureData.IsUnknown() {
		secureData = types.ObjectValueMust(
			SecureDataValue{}.AttributeTypes(ctx),
			v.SecureData.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"bank_name":        basetypes.StringType{},
			"beneficiary_name": basetypes.StringType{},
			"secure_data": basetypes.ObjectType{
				AttrTypes: SecureDataValue{}.AttributeTypes(ctx),
			},
			"tax_id": basetypes.StringType{},
			"token":  basetypes.StringType{},
		},
		map[string]attr.Value{
			"bank_name":        v.BankName,
			"beneficiary_name": v.BeneficiaryName,
			"secure_data":      secureData,
			"tax_id":           v.TaxId,
			"token":            v.Token,
		})

	return objVal, diags
}

func (v BankingInformationAttributesValue) Equal(o attr.Value) bool {
	other, ok := o.(BankingInformationAttributesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BankName.Equal(other.BankName) {
		return false
	}

	if !v.BeneficiaryName.Equal(other.BeneficiaryName) {
		return false
	}

	if !v.SecureData.Equal(other.SecureData) {
		return false
	}

	if !v.TaxId.Equal(other.TaxId) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v BankingInformationAttributesValue) Type(ctx context.Context) attr.Type {
	return BankingInformationAttributesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BankingInformationAttributesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bank_name":        basetypes.StringType{},
		"beneficiary_name": basetypes.StringType{},
		"secure_data": basetypes.ObjectType{
			AttrTypes: SecureDataValue{}.AttributeTypes(ctx),
		},
		"tax_id": basetypes.StringType{},
		"token":  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SecureDataType{}

type SecureDataType struct {
	basetypes.ObjectType
}

func (t SecureDataType) Equal(o attr.Type) bool {
	other, ok := o.(SecureDataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SecureDataType) String() string {
	return "SecureDataType"
}

func (t SecureDataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accountNumberAttribute, ok := attributes["account_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_number is missing from object`)

		return nil, diags
	}

	accountNumberVal, ok := accountNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_number expected to be basetypes.StringValue, was: %T`, accountNumberAttribute))
	}

	ibanAttribute, ok := attributes["iban"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iban is missing from object`)

		return nil, diags
	}

	ibanVal, ok := ibanAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iban expected to be basetypes.StringValue, was: %T`, ibanAttribute))
	}

	routingNumberAttribute, ok := attributes["routing_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`routing_number is missing from object`)

		return nil, diags
	}

	routingNumberVal, ok := routingNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`routing_number expected to be basetypes.StringValue, was: %T`, routingNumberAttribute))
	}

	swiftBicAttribute, ok := attributes["swift_bic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`swift_bic is missing from object`)

		return nil, diags
	}

	swiftBicVal, ok := swiftBicAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`swift_bic expected to be basetypes.StringValue, was: %T`, swiftBicAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SecureDataValue{
		AccountNumber: accountNumberVal,
		Iban:          ibanVal,
		RoutingNumber: routingNumberVal,
		SwiftBic:      swiftBicVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewSecureDataValueNull() SecureDataValue {
	return SecureDataValue{
		state: attr.ValueStateNull,
	}
}

func NewSecureDataValueUnknown() SecureDataValue {
	return SecureDataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSecureDataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SecureDataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SecureDataValue Attribute Value",
				"While creating a SecureDataValue value, a missing attribute value was detected. "+
					"A SecureDataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecureDataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SecureDataValue Attribute Type",
				"While creating a SecureDataValue value, an invalid attribute value was detected. "+
					"A SecureDataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecureDataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SecureDataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SecureDataValue Attribute Value",
				"While creating a SecureDataValue value, an extra attribute value was detected. "+
					"A SecureDataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SecureDataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSecureDataValueUnknown(), diags
	}

	accountNumberAttribute, ok := attributes["account_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_number is missing from object`)

		return NewSecureDataValueUnknown(), diags
	}

	accountNumberVal, ok := accountNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_number expected to be basetypes.StringValue, was: %T`, accountNumberAttribute))
	}

	ibanAttribute, ok := attributes["iban"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iban is missing from object`)

		return NewSecureDataValueUnknown(), diags
	}

	ibanVal, ok := ibanAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iban expected to be basetypes.StringValue, was: %T`, ibanAttribute))
	}

	routingNumberAttribute, ok := attributes["routing_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`routing_number is missing from object`)

		return NewSecureDataValueUnknown(), diags
	}

	routingNumberVal, ok := routingNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`routing_number expected to be basetypes.StringValue, was: %T`, routingNumberAttribute))
	}

	swiftBicAttribute, ok := attributes["swift_bic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`swift_bic is missing from object`)

		return NewSecureDataValueUnknown(), diags
	}

	swiftBicVal, ok := swiftBicAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`swift_bic expected to be basetypes.StringValue, was: %T`, swiftBicAttribute))
	}

	if diags.HasError() {
		return NewSecureDataValueUnknown(), diags
	}

	return SecureDataValue{
		AccountNumber: accountNumberVal,
		Iban:          ibanVal,
		RoutingNumber: routingNumberVal,
		SwiftBic:      swiftBicVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewSecureDataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SecureDataValue {
	object, diags := NewSecureDataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSecureDataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SecureDataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSecureDataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSecureDataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSecureDataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSecureDataValueMust(SecureDataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SecureDataType) ValueType(ctx context.Context) attr.Value {
	return SecureDataValue{}
}

var _ basetypes.ObjectValuable = SecureDataValue{}

type SecureDataValue struct {
	AccountNumber basetypes.StringValue `tfsdk:"account_number"`
	Iban          basetypes.StringValue `tfsdk:"iban"`
	RoutingNumber basetypes.StringValue `tfsdk:"routing_number"`
	SwiftBic      basetypes.StringValue `tfsdk:"swift_bic"`
	state         attr.ValueState
}

func (v SecureDataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["account_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["iban"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["routing_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["swift_bic"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AccountNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["account_number"] = val

		val, err = v.Iban.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["iban"] = val

		val, err = v.RoutingNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["routing_number"] = val

		val, err = v.SwiftBic.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["swift_bic"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SecureDataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SecureDataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SecureDataValue) String() string {
	return "SecureDataValue"
}

func (v SecureDataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"account_number": basetypes.StringType{},
			"iban":           basetypes.StringType{},
			"routing_number": basetypes.StringType{},
			"swift_bic":      basetypes.StringType{},
		},
		map[string]attr.Value{
			"account_number": v.AccountNumber,
			"iban":           v.Iban,
			"routing_number": v.RoutingNumber,
			"swift_bic":      v.SwiftBic,
		})

	return objVal, diags
}

func (v SecureDataValue) Equal(o attr.Value) bool {
	other, ok := o.(SecureDataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccountNumber.Equal(other.AccountNumber) {
		return false
	}

	if !v.Iban.Equal(other.Iban) {
		return false
	}

	if !v.RoutingNumber.Equal(other.RoutingNumber) {
		return false
	}

	if !v.SwiftBic.Equal(other.SwiftBic) {
		return false
	}

	return true
}

func (v SecureDataValue) Type(ctx context.Context) attr.Type {
	return SecureDataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SecureDataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"account_number": basetypes.StringType{},
		"iban":           basetypes.StringType{},
		"routing_number": basetypes.StringType{},
		"swift_bic":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BillingInformationAttributesType{}

type BillingInformationAttributesType struct {
	basetypes.ObjectType
}

func (t BillingInformationAttributesType) Equal(o attr.Type) bool {
	other, ok := o.(BillingInformationAttributesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BillingInformationAttributesType) String() string {
	return "BillingInformationAttributesType"
}

func (t BillingInformationAttributesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	addressLine1Attribute, ok := attributes["address_line_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_1 is missing from object`)

		return nil, diags
	}

	addressLine1Val, ok := addressLine1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_1 expected to be basetypes.StringValue, was: %T`, addressLine1Attribute))
	}

	addressLine2Attribute, ok := attributes["address_line_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_2 is missing from object`)

		return nil, diags
	}

	addressLine2Val, ok := addressLine2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_2 expected to be basetypes.StringValue, was: %T`, addressLine2Attribute))
	}

	billingEmailAttribute, ok := attributes["billing_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_email is missing from object`)

		return nil, diags
	}

	billingEmailVal, ok := billingEmailAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_email expected to be basetypes.ListValue, was: %T`, billingEmailAttribute))
	}

	cityAttribute, ok := attributes["city"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`city is missing from object`)

		return nil, diags
	}

	cityVal, ok := cityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`city expected to be basetypes.StringValue, was: %T`, cityAttribute))
	}

	companyNameAttribute, ok := attributes["company_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_name is missing from object`)

		return nil, diags
	}

	companyNameVal, ok := companyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_name expected to be basetypes.StringValue, was: %T`, companyNameAttribute))
	}

	countryCodeAttribute, ok := attributes["country_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_code is missing from object`)

		return nil, diags
	}

	countryCodeVal, ok := countryCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_code expected to be basetypes.StringValue, was: %T`, countryCodeAttribute))
	}

	postalCodeAttribute, ok := attributes["postal_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`postal_code is missing from object`)

		return nil, diags
	}

	postalCodeVal, ok := postalCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`postal_code expected to be basetypes.StringValue, was: %T`, postalCodeAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BillingInformationAttributesValue{
		AddressLine1: addressLine1Val,
		AddressLine2: addressLine2Val,
		BillingEmail: billingEmailVal,
		City:         cityVal,
		CompanyName:  companyNameVal,
		CountryCode:  countryCodeVal,
		PostalCode:   postalCodeVal,
		State:        stateVal,
		Token:        tokenVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewBillingInformationAttributesValueNull() BillingInformationAttributesValue {
	return BillingInformationAttributesValue{
		state: attr.ValueStateNull,
	}
}

func NewBillingInformationAttributesValueUnknown() BillingInformationAttributesValue {
	return BillingInformationAttributesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBillingInformationAttributesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BillingInformationAttributesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BillingInformationAttributesValue Attribute Value",
				"While creating a BillingInformationAttributesValue value, a missing attribute value was detected. "+
					"A BillingInformationAttributesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingInformationAttributesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BillingInformationAttributesValue Attribute Type",
				"While creating a BillingInformationAttributesValue value, an invalid attribute value was detected. "+
					"A BillingInformationAttributesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingInformationAttributesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BillingInformationAttributesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BillingInformationAttributesValue Attribute Value",
				"While creating a BillingInformationAttributesValue value, an extra attribute value was detected. "+
					"A BillingInformationAttributesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BillingInformationAttributesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBillingInformationAttributesValueUnknown(), diags
	}

	addressLine1Attribute, ok := attributes["address_line_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_1 is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	addressLine1Val, ok := addressLine1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_1 expected to be basetypes.StringValue, was: %T`, addressLine1Attribute))
	}

	addressLine2Attribute, ok := attributes["address_line_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address_line_2 is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	addressLine2Val, ok := addressLine2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address_line_2 expected to be basetypes.StringValue, was: %T`, addressLine2Attribute))
	}

	billingEmailAttribute, ok := attributes["billing_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_email is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	billingEmailVal, ok := billingEmailAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_email expected to be basetypes.ListValue, was: %T`, billingEmailAttribute))
	}

	cityAttribute, ok := attributes["city"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`city is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	cityVal, ok := cityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`city expected to be basetypes.StringValue, was: %T`, cityAttribute))
	}

	companyNameAttribute, ok := attributes["company_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_name is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	companyNameVal, ok := companyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_name expected to be basetypes.StringValue, was: %T`, companyNameAttribute))
	}

	countryCodeAttribute, ok := attributes["country_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_code is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	countryCodeVal, ok := countryCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_code expected to be basetypes.StringValue, was: %T`, countryCodeAttribute))
	}

	postalCodeAttribute, ok := attributes["postal_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`postal_code is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	postalCodeVal, ok := postalCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`postal_code expected to be basetypes.StringValue, was: %T`, postalCodeAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBillingInformationAttributesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewBillingInformationAttributesValueUnknown(), diags
	}

	return BillingInformationAttributesValue{
		AddressLine1: addressLine1Val,
		AddressLine2: addressLine2Val,
		BillingEmail: billingEmailVal,
		City:         cityVal,
		CompanyName:  companyNameVal,
		CountryCode:  countryCodeVal,
		PostalCode:   postalCodeVal,
		State:        stateVal,
		Token:        tokenVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewBillingInformationAttributesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BillingInformationAttributesValue {
	object, diags := NewBillingInformationAttributesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBillingInformationAttributesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BillingInformationAttributesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBillingInformationAttributesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBillingInformationAttributesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBillingInformationAttributesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBillingInformationAttributesValueMust(BillingInformationAttributesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BillingInformationAttributesType) ValueType(ctx context.Context) attr.Value {
	return BillingInformationAttributesValue{}
}

var _ basetypes.ObjectValuable = BillingInformationAttributesValue{}

type BillingInformationAttributesValue struct {
	AddressLine1 basetypes.StringValue `tfsdk:"address_line_1"`
	AddressLine2 basetypes.StringValue `tfsdk:"address_line_2"`
	BillingEmail basetypes.ListValue   `tfsdk:"billing_email"`
	City         basetypes.StringValue `tfsdk:"city"`
	CompanyName  basetypes.StringValue `tfsdk:"company_name"`
	CountryCode  basetypes.StringValue `tfsdk:"country_code"`
	PostalCode   basetypes.StringValue `tfsdk:"postal_code"`
	State        basetypes.StringValue `tfsdk:"state"`
	Token        basetypes.StringValue `tfsdk:"token"`
	state        attr.ValueState
}

func (v BillingInformationAttributesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["address_line_1"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["address_line_2"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["billing_email"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["city"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["company_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["country_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["postal_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.AddressLine1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["address_line_1"] = val

		val, err = v.AddressLine2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["address_line_2"] = val

		val, err = v.BillingEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_email"] = val

		val, err = v.City.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["city"] = val

		val, err = v.CompanyName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company_name"] = val

		val, err = v.CountryCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country_code"] = val

		val, err = v.PostalCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["postal_code"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BillingInformationAttributesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BillingInformationAttributesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BillingInformationAttributesValue) String() string {
	return "BillingInformationAttributesValue"
}

func (v BillingInformationAttributesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	billingEmailVal, d := types.ListValue(types.StringType, v.BillingEmail.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"address_line_1": basetypes.StringType{},
			"address_line_2": basetypes.StringType{},
			"billing_email": basetypes.ListType{
				ElemType: types.StringType,
			},
			"city":         basetypes.StringType{},
			"company_name": basetypes.StringType{},
			"country_code": basetypes.StringType{},
			"postal_code":  basetypes.StringType{},
			"state":        basetypes.StringType{},
			"token":        basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"address_line_1": basetypes.StringType{},
			"address_line_2": basetypes.StringType{},
			"billing_email": basetypes.ListType{
				ElemType: types.StringType,
			},
			"city":         basetypes.StringType{},
			"company_name": basetypes.StringType{},
			"country_code": basetypes.StringType{},
			"postal_code":  basetypes.StringType{},
			"state":        basetypes.StringType{},
			"token":        basetypes.StringType{},
		},
		map[string]attr.Value{
			"address_line_1": v.AddressLine1,
			"address_line_2": v.AddressLine2,
			"billing_email":  billingEmailVal,
			"city":           v.City,
			"company_name":   v.CompanyName,
			"country_code":   v.CountryCode,
			"postal_code":    v.PostalCode,
			"state":          v.State,
			"token":          v.Token,
		})

	return objVal, diags
}

func (v BillingInformationAttributesValue) Equal(o attr.Value) bool {
	other, ok := o.(BillingInformationAttributesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AddressLine1.Equal(other.AddressLine1) {
		return false
	}

	if !v.AddressLine2.Equal(other.AddressLine2) {
		return false
	}

	if !v.BillingEmail.Equal(other.BillingEmail) {
		return false
	}

	if !v.City.Equal(other.City) {
		return false
	}

	if !v.CompanyName.Equal(other.CompanyName) {
		return false
	}

	if !v.CountryCode.Equal(other.CountryCode) {
		return false
	}

	if !v.PostalCode.Equal(other.PostalCode) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v BillingInformationAttributesValue) Type(ctx context.Context) attr.Type {
	return BillingInformationAttributesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BillingInformationAttributesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"address_line_1": basetypes.StringType{},
		"address_line_2": basetypes.StringType{},
		"billing_email": basetypes.ListType{
			ElemType: types.StringType,
		},
		"city":         basetypes.StringType{},
		"company_name": basetypes.StringType{},
		"country_code": basetypes.StringType{},
		"postal_code":  basetypes.StringType{},
		"state":        basetypes.StringType{},
		"token":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BusinessInformationAttributesType{}

type BusinessInformationAttributesType struct {
	basetypes.ObjectType
}

func (t BusinessInformationAttributesType) Equal(o attr.Type) bool {
	other, ok := o.(BusinessInformationAttributesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BusinessInformationAttributesType) String() string {
	return "BusinessInformationAttributesType"
}

func (t BusinessInformationAttributesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return nil, diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BusinessInformationAttributesValue{
		Metadata: metadataVal,
		Token:    tokenVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewBusinessInformationAttributesValueNull() BusinessInformationAttributesValue {
	return BusinessInformationAttributesValue{
		state: attr.ValueStateNull,
	}
}

func NewBusinessInformationAttributesValueUnknown() BusinessInformationAttributesValue {
	return BusinessInformationAttributesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBusinessInformationAttributesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BusinessInformationAttributesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BusinessInformationAttributesValue Attribute Value",
				"While creating a BusinessInformationAttributesValue value, a missing attribute value was detected. "+
					"A BusinessInformationAttributesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BusinessInformationAttributesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BusinessInformationAttributesValue Attribute Type",
				"While creating a BusinessInformationAttributesValue value, an invalid attribute value was detected. "+
					"A BusinessInformationAttributesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BusinessInformationAttributesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BusinessInformationAttributesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BusinessInformationAttributesValue Attribute Value",
				"While creating a BusinessInformationAttributesValue value, an extra attribute value was detected. "+
					"A BusinessInformationAttributesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BusinessInformationAttributesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewBusinessInformationAttributesValueUnknown(), diags
	}

	return BusinessInformationAttributesValue{
		Metadata: metadataVal,
		Token:    tokenVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewBusinessInformationAttributesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BusinessInformationAttributesValue {
	object, diags := NewBusinessInformationAttributesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBusinessInformationAttributesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BusinessInformationAttributesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBusinessInformationAttributesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBusinessInformationAttributesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBusinessInformationAttributesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBusinessInformationAttributesValueMust(BusinessInformationAttributesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BusinessInformationAttributesType) ValueType(ctx context.Context) attr.Value {
	return BusinessInformationAttributesValue{}
}

var _ basetypes.ObjectValuable = BusinessInformationAttributesValue{}

type BusinessInformationAttributesValue struct {
	Metadata basetypes.ObjectValue `tfsdk:"metadata"`
	Token    basetypes.StringValue `tfsdk:"token"`
	state    attr.ValueState
}

func (v BusinessInformationAttributesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["metadata"] = basetypes.ObjectType{
		AttrTypes: MetadataValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Metadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metadata"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BusinessInformationAttributesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BusinessInformationAttributesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BusinessInformationAttributesValue) String() string {
	return "BusinessInformationAttributesValue"
}

func (v BusinessInformationAttributesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var metadata basetypes.ObjectValue

	if v.Metadata.IsNull() {
		metadata = types.ObjectNull(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if v.Metadata.IsUnknown() {
		metadata = types.ObjectUnknown(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Metadata.IsNull() && !v.Metadata.IsUnknown() {
		metadata = types.ObjectValueMust(
			MetadataValue{}.AttributeTypes(ctx),
			v.Metadata.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"metadata": basetypes.ObjectType{
				AttrTypes: MetadataValue{}.AttributeTypes(ctx),
			},
			"token": basetypes.StringType{},
		},
		map[string]attr.Value{
			"metadata": metadata,
			"token":    v.Token,
		})

	return objVal, diags
}

func (v BusinessInformationAttributesValue) Equal(o attr.Value) bool {
	other, ok := o.(BusinessInformationAttributesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Metadata.Equal(other.Metadata) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v BusinessInformationAttributesValue) Type(ctx context.Context) attr.Type {
	return BusinessInformationAttributesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BusinessInformationAttributesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"metadata": basetypes.ObjectType{
			AttrTypes: MetadataValue{}.AttributeTypes(ctx),
		},
		"token": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return nil, diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.ListValue, was: %T`, customFieldsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		CustomFields: customFieldsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.ListValue, was: %T`, customFieldsAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		CustomFields: customFieldsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	CustomFields basetypes.ListValue `tfsdk:"custom_fields"`
	state        attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["custom_fields"] = basetypes.ListType{
		ElemType: CustomFieldsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.CustomFields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_fields"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	customFields := types.ListValueMust(
		CustomFieldsType{
			basetypes.ObjectType{
				AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
			},
		},
		v.CustomFields.Elements(),
	)

	if v.CustomFields.IsNull() {
		customFields = types.ListNull(
			CustomFieldsType{
				basetypes.ObjectType{
					AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.CustomFields.IsUnknown() {
		customFields = types.ListUnknown(
			CustomFieldsType{
				basetypes.ObjectType{
					AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"custom_fields": basetypes.ListType{
				ElemType: CustomFieldsValue{}.Type(ctx),
			},
		},
		map[string]attr.Value{
			"custom_fields": customFields,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CustomFields.Equal(other.CustomFields) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"custom_fields": basetypes.ListType{
			ElemType: CustomFieldsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = CustomFieldsType{}

type CustomFieldsType struct {
	basetypes.ObjectType
}

func (t CustomFieldsType) Equal(o attr.Type) bool {
	other, ok := o.(CustomFieldsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CustomFieldsType) String() string {
	return "CustomFieldsType"
}

func (t CustomFieldsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CustomFieldsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldsValueNull() CustomFieldsValue {
	return CustomFieldsValue{
		state: attr.ValueStateNull,
	}
}

func NewCustomFieldsValueUnknown() CustomFieldsValue {
	return CustomFieldsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCustomFieldsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CustomFieldsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CustomFieldsValue Attribute Value",
				"While creating a CustomFieldsValue value, a missing attribute value was detected. "+
					"A CustomFieldsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CustomFieldsValue Attribute Type",
				"While creating a CustomFieldsValue value, an invalid attribute value was detected. "+
					"A CustomFieldsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CustomFieldsValue Attribute Value",
				"While creating a CustomFieldsValue value, an extra attribute value was detected. "+
					"A CustomFieldsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CustomFieldsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCustomFieldsValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCustomFieldsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewCustomFieldsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewCustomFieldsValueUnknown(), diags
	}

	return CustomFieldsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CustomFieldsValue {
	object, diags := NewCustomFieldsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCustomFieldsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CustomFieldsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCustomFieldsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCustomFieldsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCustomFieldsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCustomFieldsValueMust(CustomFieldsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CustomFieldsType) ValueType(ctx context.Context) attr.Value {
	return CustomFieldsValue{}
}

var _ basetypes.ObjectValuable = CustomFieldsValue{}

type CustomFieldsValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v CustomFieldsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CustomFieldsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CustomFieldsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CustomFieldsValue) String() string {
	return "CustomFieldsValue"
}

func (v CustomFieldsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name":  basetypes.StringType{},
			"value": basetypes.StringType{},
		},
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v CustomFieldsValue) Equal(o attr.Value) bool {
	other, ok := o.(CustomFieldsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v CustomFieldsValue) Type(ctx context.Context) attr.Type {
	return CustomFieldsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CustomFieldsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
