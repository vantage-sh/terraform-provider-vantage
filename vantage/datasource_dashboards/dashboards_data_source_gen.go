// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_dashboards

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func DashboardsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dashboards": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
						},
						"date_bin": schema.StringAttribute{
							Computed:            true,
							Description:         "Determines how to group costs in the Dashboard.",
							MarkdownDescription: "Determines how to group costs in the Dashboard.",
						},
						"date_interval": schema.StringAttribute{
							Computed:            true,
							Description:         "Determines the date range for Reports in the Dashboard. Guaranteed to be set to 'custom' if 'start_date' and 'end_date' are set.",
							MarkdownDescription: "Determines the date range for Reports in the Dashboard. Guaranteed to be set to 'custom' if 'start_date' and 'end_date' are set.",
						},
						"end_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The end date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.",
							MarkdownDescription: "The end date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.",
						},
						"saved_filter_tokens": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The tokens of the Saved Filters used in the Dashboard.",
							MarkdownDescription: "The tokens of the Saved Filters used in the Dashboard.",
						},
						"start_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The start date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.",
							MarkdownDescription: "The start date for the date range for Reports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.",
						},
						"title": schema.StringAttribute{
							Computed:            true,
							Description:         "The title of the Dashboard.",
							MarkdownDescription: "The title of the Dashboard.",
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.",
						},
						"widgets": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"settings": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"display_type": schema.StringAttribute{
												Computed: true,
											},
										},
										CustomType: SettingsType{
											ObjectType: types.ObjectType{
												AttrTypes: SettingsValue{}.AttributeTypes(ctx),
											},
										},
										Computed: true,
									},
									"title": schema.StringAttribute{
										Computed:            true,
										Description:         "The title of the Widget.",
										MarkdownDescription: "The title of the Widget.",
									},
									"widgetable_token": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: WidgetsType{
									ObjectType: types.ObjectType{
										AttrTypes: WidgetsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
						"workspace_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The token for the Workspace the Dashboard is a part of.",
							MarkdownDescription: "The token for the Workspace the Dashboard is a part of.",
						},
					},
					CustomType: DashboardsType{
						ObjectType: types.ObjectType{
							AttrTypes: DashboardsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type DashboardsModel struct {
	Dashboards types.List `tfsdk:"dashboards"`
}

var _ basetypes.ObjectTypable = DashboardsType{}

type DashboardsType struct {
	basetypes.ObjectType
}

func (t DashboardsType) Equal(o attr.Type) bool {
	other, ok := o.(DashboardsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DashboardsType) String() string {
	return "DashboardsType"
}

func (t DashboardsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	dateBinAttribute, ok := attributes["date_bin"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date_bin is missing from object`)

		return nil, diags
	}

	dateBinVal, ok := dateBinAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date_bin expected to be basetypes.StringValue, was: %T`, dateBinAttribute))
	}

	dateIntervalAttribute, ok := attributes["date_interval"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date_interval is missing from object`)

		return nil, diags
	}

	dateIntervalVal, ok := dateIntervalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date_interval expected to be basetypes.StringValue, was: %T`, dateIntervalAttribute))
	}

	endDateAttribute, ok := attributes["end_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_date is missing from object`)

		return nil, diags
	}

	endDateVal, ok := endDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_date expected to be basetypes.StringValue, was: %T`, endDateAttribute))
	}

	savedFilterTokensAttribute, ok := attributes["saved_filter_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`saved_filter_tokens is missing from object`)

		return nil, diags
	}

	savedFilterTokensVal, ok := savedFilterTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`saved_filter_tokens expected to be basetypes.ListValue, was: %T`, savedFilterTokensAttribute))
	}

	startDateAttribute, ok := attributes["start_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_date is missing from object`)

		return nil, diags
	}

	startDateVal, ok := startDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_date expected to be basetypes.StringValue, was: %T`, startDateAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	widgetsAttribute, ok := attributes["widgets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widgets is missing from object`)

		return nil, diags
	}

	widgetsVal, ok := widgetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widgets expected to be basetypes.ListValue, was: %T`, widgetsAttribute))
	}

	workspaceTokenAttribute, ok := attributes["workspace_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`workspace_token is missing from object`)

		return nil, diags
	}

	workspaceTokenVal, ok := workspaceTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`workspace_token expected to be basetypes.StringValue, was: %T`, workspaceTokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DashboardsValue{
		CreatedAt:         createdAtVal,
		DateBin:           dateBinVal,
		DateInterval:      dateIntervalVal,
		EndDate:           endDateVal,
		SavedFilterTokens: savedFilterTokensVal,
		StartDate:         startDateVal,
		Title:             titleVal,
		Token:             tokenVal,
		UpdatedAt:         updatedAtVal,
		Widgets:           widgetsVal,
		WorkspaceToken:    workspaceTokenVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewDashboardsValueNull() DashboardsValue {
	return DashboardsValue{
		state: attr.ValueStateNull,
	}
}

func NewDashboardsValueUnknown() DashboardsValue {
	return DashboardsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDashboardsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DashboardsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DashboardsValue Attribute Value",
				"While creating a DashboardsValue value, a missing attribute value was detected. "+
					"A DashboardsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DashboardsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DashboardsValue Attribute Type",
				"While creating a DashboardsValue value, an invalid attribute value was detected. "+
					"A DashboardsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DashboardsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DashboardsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DashboardsValue Attribute Value",
				"While creating a DashboardsValue value, an extra attribute value was detected. "+
					"A DashboardsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DashboardsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDashboardsValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	dateBinAttribute, ok := attributes["date_bin"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date_bin is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	dateBinVal, ok := dateBinAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date_bin expected to be basetypes.StringValue, was: %T`, dateBinAttribute))
	}

	dateIntervalAttribute, ok := attributes["date_interval"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date_interval is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	dateIntervalVal, ok := dateIntervalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date_interval expected to be basetypes.StringValue, was: %T`, dateIntervalAttribute))
	}

	endDateAttribute, ok := attributes["end_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_date is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	endDateVal, ok := endDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_date expected to be basetypes.StringValue, was: %T`, endDateAttribute))
	}

	savedFilterTokensAttribute, ok := attributes["saved_filter_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`saved_filter_tokens is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	savedFilterTokensVal, ok := savedFilterTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`saved_filter_tokens expected to be basetypes.ListValue, was: %T`, savedFilterTokensAttribute))
	}

	startDateAttribute, ok := attributes["start_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_date is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	startDateVal, ok := startDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_date expected to be basetypes.StringValue, was: %T`, startDateAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	widgetsAttribute, ok := attributes["widgets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widgets is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	widgetsVal, ok := widgetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widgets expected to be basetypes.ListValue, was: %T`, widgetsAttribute))
	}

	workspaceTokenAttribute, ok := attributes["workspace_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`workspace_token is missing from object`)

		return NewDashboardsValueUnknown(), diags
	}

	workspaceTokenVal, ok := workspaceTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`workspace_token expected to be basetypes.StringValue, was: %T`, workspaceTokenAttribute))
	}

	if diags.HasError() {
		return NewDashboardsValueUnknown(), diags
	}

	return DashboardsValue{
		CreatedAt:         createdAtVal,
		DateBin:           dateBinVal,
		DateInterval:      dateIntervalVal,
		EndDate:           endDateVal,
		SavedFilterTokens: savedFilterTokensVal,
		StartDate:         startDateVal,
		Title:             titleVal,
		Token:             tokenVal,
		UpdatedAt:         updatedAtVal,
		Widgets:           widgetsVal,
		WorkspaceToken:    workspaceTokenVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewDashboardsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DashboardsValue {
	object, diags := NewDashboardsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDashboardsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DashboardsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDashboardsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDashboardsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDashboardsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDashboardsValueMust(DashboardsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DashboardsType) ValueType(ctx context.Context) attr.Value {
	return DashboardsValue{}
}

var _ basetypes.ObjectValuable = DashboardsValue{}

type DashboardsValue struct {
	CreatedAt         basetypes.StringValue `tfsdk:"created_at"`
	DateBin           basetypes.StringValue `tfsdk:"date_bin"`
	DateInterval      basetypes.StringValue `tfsdk:"date_interval"`
	EndDate           basetypes.StringValue `tfsdk:"end_date"`
	SavedFilterTokens basetypes.ListValue   `tfsdk:"saved_filter_tokens"`
	StartDate         basetypes.StringValue `tfsdk:"start_date"`
	Title             basetypes.StringValue `tfsdk:"title"`
	Token             basetypes.StringValue `tfsdk:"token"`
	UpdatedAt         basetypes.StringValue `tfsdk:"updated_at"`
	Widgets           basetypes.ListValue   `tfsdk:"widgets"`
	WorkspaceToken    basetypes.StringValue `tfsdk:"workspace_token"`
	state             attr.ValueState
}

func (v DashboardsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 11)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["date_bin"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["date_interval"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["end_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["saved_filter_tokens"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["start_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widgets"] = basetypes.ListType{
		ElemType: WidgetsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["workspace_token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 11)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.DateBin.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["date_bin"] = val

		val, err = v.DateInterval.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["date_interval"] = val

		val, err = v.EndDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end_date"] = val

		val, err = v.SavedFilterTokens.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["saved_filter_tokens"] = val

		val, err = v.StartDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_date"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.Widgets.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widgets"] = val

		val, err = v.WorkspaceToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["workspace_token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DashboardsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DashboardsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DashboardsValue) String() string {
	return "DashboardsValue"
}

func (v DashboardsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	widgets := types.ListValueMust(
		WidgetsType{
			basetypes.ObjectType{
				AttrTypes: WidgetsValue{}.AttributeTypes(ctx),
			},
		},
		v.Widgets.Elements(),
	)

	if v.Widgets.IsNull() {
		widgets = types.ListNull(
			WidgetsType{
				basetypes.ObjectType{
					AttrTypes: WidgetsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Widgets.IsUnknown() {
		widgets = types.ListUnknown(
			WidgetsType{
				basetypes.ObjectType{
					AttrTypes: WidgetsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	savedFilterTokensVal, d := types.ListValue(types.StringType, v.SavedFilterTokens.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_at":    basetypes.StringType{},
			"date_bin":      basetypes.StringType{},
			"date_interval": basetypes.StringType{},
			"end_date":      basetypes.StringType{},
			"saved_filter_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"start_date": basetypes.StringType{},
			"title":      basetypes.StringType{},
			"token":      basetypes.StringType{},
			"updated_at": basetypes.StringType{},
			"widgets": basetypes.ListType{
				ElemType: WidgetsValue{}.Type(ctx),
			},
			"workspace_token": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"created_at":    basetypes.StringType{},
			"date_bin":      basetypes.StringType{},
			"date_interval": basetypes.StringType{},
			"end_date":      basetypes.StringType{},
			"saved_filter_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"start_date": basetypes.StringType{},
			"title":      basetypes.StringType{},
			"token":      basetypes.StringType{},
			"updated_at": basetypes.StringType{},
			"widgets": basetypes.ListType{
				ElemType: WidgetsValue{}.Type(ctx),
			},
			"workspace_token": basetypes.StringType{},
		},
		map[string]attr.Value{
			"created_at":          v.CreatedAt,
			"date_bin":            v.DateBin,
			"date_interval":       v.DateInterval,
			"end_date":            v.EndDate,
			"saved_filter_tokens": savedFilterTokensVal,
			"start_date":          v.StartDate,
			"title":               v.Title,
			"token":               v.Token,
			"updated_at":          v.UpdatedAt,
			"widgets":             widgets,
			"workspace_token":     v.WorkspaceToken,
		})

	return objVal, diags
}

func (v DashboardsValue) Equal(o attr.Value) bool {
	other, ok := o.(DashboardsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.DateBin.Equal(other.DateBin) {
		return false
	}

	if !v.DateInterval.Equal(other.DateInterval) {
		return false
	}

	if !v.EndDate.Equal(other.EndDate) {
		return false
	}

	if !v.SavedFilterTokens.Equal(other.SavedFilterTokens) {
		return false
	}

	if !v.StartDate.Equal(other.StartDate) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.Widgets.Equal(other.Widgets) {
		return false
	}

	if !v.WorkspaceToken.Equal(other.WorkspaceToken) {
		return false
	}

	return true
}

func (v DashboardsValue) Type(ctx context.Context) attr.Type {
	return DashboardsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DashboardsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":    basetypes.StringType{},
		"date_bin":      basetypes.StringType{},
		"date_interval": basetypes.StringType{},
		"end_date":      basetypes.StringType{},
		"saved_filter_tokens": basetypes.ListType{
			ElemType: types.StringType,
		},
		"start_date": basetypes.StringType{},
		"title":      basetypes.StringType{},
		"token":      basetypes.StringType{},
		"updated_at": basetypes.StringType{},
		"widgets": basetypes.ListType{
			ElemType: WidgetsValue{}.Type(ctx),
		},
		"workspace_token": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = WidgetsType{}

type WidgetsType struct {
	basetypes.ObjectType
}

func (t WidgetsType) Equal(o attr.Type) bool {
	other, ok := o.(WidgetsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WidgetsType) String() string {
	return "WidgetsType"
}

func (t WidgetsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	widgetableTokenAttribute, ok := attributes["widgetable_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widgetable_token is missing from object`)

		return nil, diags
	}

	widgetableTokenVal, ok := widgetableTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widgetable_token expected to be basetypes.StringValue, was: %T`, widgetableTokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WidgetsValue{
		Settings:        settingsVal,
		Title:           titleVal,
		WidgetableToken: widgetableTokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewWidgetsValueNull() WidgetsValue {
	return WidgetsValue{
		state: attr.ValueStateNull,
	}
}

func NewWidgetsValueUnknown() WidgetsValue {
	return WidgetsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWidgetsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WidgetsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WidgetsValue Attribute Value",
				"While creating a WidgetsValue value, a missing attribute value was detected. "+
					"A WidgetsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WidgetsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WidgetsValue Attribute Type",
				"While creating a WidgetsValue value, an invalid attribute value was detected. "+
					"A WidgetsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WidgetsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WidgetsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WidgetsValue Attribute Value",
				"While creating a WidgetsValue value, an extra attribute value was detected. "+
					"A WidgetsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WidgetsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWidgetsValueUnknown(), diags
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewWidgetsValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewWidgetsValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	widgetableTokenAttribute, ok := attributes["widgetable_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widgetable_token is missing from object`)

		return NewWidgetsValueUnknown(), diags
	}

	widgetableTokenVal, ok := widgetableTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widgetable_token expected to be basetypes.StringValue, was: %T`, widgetableTokenAttribute))
	}

	if diags.HasError() {
		return NewWidgetsValueUnknown(), diags
	}

	return WidgetsValue{
		Settings:        settingsVal,
		Title:           titleVal,
		WidgetableToken: widgetableTokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewWidgetsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WidgetsValue {
	object, diags := NewWidgetsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWidgetsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WidgetsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWidgetsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWidgetsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWidgetsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWidgetsValueMust(WidgetsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WidgetsType) ValueType(ctx context.Context) attr.Value {
	return WidgetsValue{}
}

var _ basetypes.ObjectValuable = WidgetsValue{}

type WidgetsValue struct {
	Settings        basetypes.ObjectValue `tfsdk:"settings"`
	Title           basetypes.StringValue `tfsdk:"title"`
	WidgetableToken basetypes.StringValue `tfsdk:"widgetable_token"`
	state           attr.ValueState
}

func (v WidgetsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["settings"] = basetypes.ObjectType{
		AttrTypes: SettingsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widgetable_token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.WidgetableToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widgetable_token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WidgetsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WidgetsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WidgetsValue) String() string {
	return "WidgetsValue"
}

func (v WidgetsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var settings basetypes.ObjectValue

	if v.Settings.IsNull() {
		settings = types.ObjectNull(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Settings.IsUnknown() {
		settings = types.ObjectUnknown(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Settings.IsNull() && !v.Settings.IsUnknown() {
		settings = types.ObjectValueMust(
			SettingsValue{}.AttributeTypes(ctx),
			v.Settings.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"settings": basetypes.ObjectType{
				AttrTypes: SettingsValue{}.AttributeTypes(ctx),
			},
			"title":            basetypes.StringType{},
			"widgetable_token": basetypes.StringType{},
		},
		map[string]attr.Value{
			"settings":         settings,
			"title":            v.Title,
			"widgetable_token": v.WidgetableToken,
		})

	return objVal, diags
}

func (v WidgetsValue) Equal(o attr.Value) bool {
	other, ok := o.(WidgetsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.WidgetableToken.Equal(other.WidgetableToken) {
		return false
	}

	return true
}

func (v WidgetsValue) Type(ctx context.Context) attr.Type {
	return WidgetsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WidgetsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"settings": basetypes.ObjectType{
			AttrTypes: SettingsValue{}.AttributeTypes(ctx),
		},
		"title":            basetypes.StringType{},
		"widgetable_token": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SettingsType{}

type SettingsType struct {
	basetypes.ObjectType
}

func (t SettingsType) Equal(o attr.Type) bool {
	other, ok := o.(SettingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SettingsType) String() string {
	return "SettingsType"
}

func (t SettingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	displayTypeAttribute, ok := attributes["display_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_type is missing from object`)

		return nil, diags
	}

	displayTypeVal, ok := displayTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_type expected to be basetypes.StringValue, was: %T`, displayTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SettingsValue{
		DisplayType: displayTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueNull() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateNull,
	}
}

func NewSettingsValueUnknown() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSettingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SettingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SettingsValue Attribute Value",
				"While creating a SettingsValue value, a missing attribute value was detected. "+
					"A SettingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SettingsValue Attribute Type",
				"While creating a SettingsValue value, an invalid attribute value was detected. "+
					"A SettingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SettingsValue Attribute Value",
				"While creating a SettingsValue value, an extra attribute value was detected. "+
					"A SettingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SettingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	displayTypeAttribute, ok := attributes["display_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_type is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	displayTypeVal, ok := displayTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_type expected to be basetypes.StringValue, was: %T`, displayTypeAttribute))
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	return SettingsValue{
		DisplayType: displayTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SettingsValue {
	object, diags := NewSettingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSettingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SettingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSettingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSettingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSettingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSettingsValueMust(SettingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SettingsType) ValueType(ctx context.Context) attr.Value {
	return SettingsValue{}
}

var _ basetypes.ObjectValuable = SettingsValue{}

type SettingsValue struct {
	DisplayType basetypes.StringValue `tfsdk:"display_type"`
	state       attr.ValueState
}

func (v SettingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["display_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.DisplayType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SettingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SettingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SettingsValue) String() string {
	return "SettingsValue"
}

func (v SettingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"display_type": basetypes.StringType{},
		},
		map[string]attr.Value{
			"display_type": v.DisplayType,
		})

	return objVal, diags
}

func (v SettingsValue) Equal(o attr.Value) bool {
	other, ok := o.(SettingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DisplayType.Equal(other.DisplayType) {
		return false
	}

	return true
}

func (v SettingsValue) Type(ctx context.Context) attr.Type {
	return SettingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SettingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"display_type": basetypes.StringType{},
	}
}
