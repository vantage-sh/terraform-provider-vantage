// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cost_alerts

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CostAlertsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cost_alerts": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, for when the alert was created. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, for when the alert was created. ISO 8601 Formatted.",
						},
						"email_recipients": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The email addresses that will receive the alert.",
							MarkdownDescription: "The email addresses that will receive the alert.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The id of the resource",
							MarkdownDescription: "The id of the resource",
						},
						"interval": schema.StringAttribute{
							Computed:            true,
							Description:         "The period of time used to compare costs. Options are 'day', 'week', 'month', 'quarter'.",
							MarkdownDescription: "The period of time used to compare costs. Options are 'day', 'week', 'month', 'quarter'.",
						},
						"report_tokens": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The tokens of the reports to alert on.",
							MarkdownDescription: "The tokens of the reports to alert on.",
						},
						"slack_channels": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The Slack channels that will receive the alert. Make sure your slack integration is connected at https://console.vantage.sh/settings/slack.",
							MarkdownDescription: "The Slack channels that will receive the alert. Make sure your slack integration is connected at https://console.vantage.sh/settings/slack.",
						},
						"teams_channels": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The Microsoft Teams channels that will receive the alert. Make sure your teams integration is connected at https://console.vantage.sh/settings/microsoft_teams.",
							MarkdownDescription: "The Microsoft Teams channels that will receive the alert. Make sure your teams integration is connected at https://console.vantage.sh/settings/microsoft_teams.",
						},
						"threshold": schema.NumberAttribute{
							Computed:            true,
							Description:         "The cost change threshold to alert on.",
							MarkdownDescription: "The cost change threshold to alert on.",
						},
						"title": schema.StringAttribute{
							Computed: true,
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
						"unit_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The unit type used to compare costs. Options are 'currency' or 'percentage'.",
							MarkdownDescription: "The unit type used to compare costs. Options are 'currency' or 'percentage'.",
						},
						"updated_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, for when the alert was last updated. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, for when the alert was last updated. ISO 8601 Formatted.",
						},
						"workspace_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the organization that owns the CostAlert.",
							MarkdownDescription: "The ID of the organization that owns the CostAlert.",
						},
					},
					CustomType: CostAlertsType{
						ObjectType: types.ObjectType{
							AttrTypes: CostAlertsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type CostAlertsModel struct {
	CostAlerts types.List `tfsdk:"cost_alerts"`
}

var _ basetypes.ObjectTypable = CostAlertsType{}

type CostAlertsType struct {
	basetypes.ObjectType
}

func (t CostAlertsType) Equal(o attr.Type) bool {
	other, ok := o.(CostAlertsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CostAlertsType) String() string {
	return "CostAlertsType"
}

func (t CostAlertsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	emailRecipientsAttribute, ok := attributes["email_recipients"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_recipients is missing from object`)

		return nil, diags
	}

	emailRecipientsVal, ok := emailRecipientsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_recipients expected to be basetypes.ListValue, was: %T`, emailRecipientsAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	intervalAttribute, ok := attributes["interval"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval is missing from object`)

		return nil, diags
	}

	intervalVal, ok := intervalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval expected to be basetypes.StringValue, was: %T`, intervalAttribute))
	}

	reportTokensAttribute, ok := attributes["report_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`report_tokens is missing from object`)

		return nil, diags
	}

	reportTokensVal, ok := reportTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`report_tokens expected to be basetypes.ListValue, was: %T`, reportTokensAttribute))
	}

	slackChannelsAttribute, ok := attributes["slack_channels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slack_channels is missing from object`)

		return nil, diags
	}

	slackChannelsVal, ok := slackChannelsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slack_channels expected to be basetypes.ListValue, was: %T`, slackChannelsAttribute))
	}

	teamsChannelsAttribute, ok := attributes["teams_channels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`teams_channels is missing from object`)

		return nil, diags
	}

	teamsChannelsVal, ok := teamsChannelsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`teams_channels expected to be basetypes.ListValue, was: %T`, teamsChannelsAttribute))
	}

	thresholdAttribute, ok := attributes["threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`threshold is missing from object`)

		return nil, diags
	}

	thresholdVal, ok := thresholdAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`threshold expected to be basetypes.NumberValue, was: %T`, thresholdAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	unitTypeAttribute, ok := attributes["unit_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unit_type is missing from object`)

		return nil, diags
	}

	unitTypeVal, ok := unitTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unit_type expected to be basetypes.StringValue, was: %T`, unitTypeAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	workspaceTokenAttribute, ok := attributes["workspace_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`workspace_token is missing from object`)

		return nil, diags
	}

	workspaceTokenVal, ok := workspaceTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`workspace_token expected to be basetypes.StringValue, was: %T`, workspaceTokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CostAlertsValue{
		CreatedAt:       createdAtVal,
		EmailRecipients: emailRecipientsVal,
		Id:              idVal,
		Interval:        intervalVal,
		ReportTokens:    reportTokensVal,
		SlackChannels:   slackChannelsVal,
		TeamsChannels:   teamsChannelsVal,
		Threshold:       thresholdVal,
		Title:           titleVal,
		Token:           tokenVal,
		UnitType:        unitTypeVal,
		UpdatedAt:       updatedAtVal,
		WorkspaceToken:  workspaceTokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCostAlertsValueNull() CostAlertsValue {
	return CostAlertsValue{
		state: attr.ValueStateNull,
	}
}

func NewCostAlertsValueUnknown() CostAlertsValue {
	return CostAlertsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCostAlertsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CostAlertsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CostAlertsValue Attribute Value",
				"While creating a CostAlertsValue value, a missing attribute value was detected. "+
					"A CostAlertsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CostAlertsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CostAlertsValue Attribute Type",
				"While creating a CostAlertsValue value, an invalid attribute value was detected. "+
					"A CostAlertsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CostAlertsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CostAlertsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CostAlertsValue Attribute Value",
				"While creating a CostAlertsValue value, an extra attribute value was detected. "+
					"A CostAlertsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CostAlertsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCostAlertsValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	emailRecipientsAttribute, ok := attributes["email_recipients"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_recipients is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	emailRecipientsVal, ok := emailRecipientsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_recipients expected to be basetypes.ListValue, was: %T`, emailRecipientsAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	intervalAttribute, ok := attributes["interval"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	intervalVal, ok := intervalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval expected to be basetypes.StringValue, was: %T`, intervalAttribute))
	}

	reportTokensAttribute, ok := attributes["report_tokens"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`report_tokens is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	reportTokensVal, ok := reportTokensAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`report_tokens expected to be basetypes.ListValue, was: %T`, reportTokensAttribute))
	}

	slackChannelsAttribute, ok := attributes["slack_channels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slack_channels is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	slackChannelsVal, ok := slackChannelsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slack_channels expected to be basetypes.ListValue, was: %T`, slackChannelsAttribute))
	}

	teamsChannelsAttribute, ok := attributes["teams_channels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`teams_channels is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	teamsChannelsVal, ok := teamsChannelsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`teams_channels expected to be basetypes.ListValue, was: %T`, teamsChannelsAttribute))
	}

	thresholdAttribute, ok := attributes["threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`threshold is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	thresholdVal, ok := thresholdAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`threshold expected to be basetypes.NumberValue, was: %T`, thresholdAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	unitTypeAttribute, ok := attributes["unit_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unit_type is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	unitTypeVal, ok := unitTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unit_type expected to be basetypes.StringValue, was: %T`, unitTypeAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	workspaceTokenAttribute, ok := attributes["workspace_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`workspace_token is missing from object`)

		return NewCostAlertsValueUnknown(), diags
	}

	workspaceTokenVal, ok := workspaceTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`workspace_token expected to be basetypes.StringValue, was: %T`, workspaceTokenAttribute))
	}

	if diags.HasError() {
		return NewCostAlertsValueUnknown(), diags
	}

	return CostAlertsValue{
		CreatedAt:       createdAtVal,
		EmailRecipients: emailRecipientsVal,
		Id:              idVal,
		Interval:        intervalVal,
		ReportTokens:    reportTokensVal,
		SlackChannels:   slackChannelsVal,
		TeamsChannels:   teamsChannelsVal,
		Threshold:       thresholdVal,
		Title:           titleVal,
		Token:           tokenVal,
		UnitType:        unitTypeVal,
		UpdatedAt:       updatedAtVal,
		WorkspaceToken:  workspaceTokenVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCostAlertsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CostAlertsValue {
	object, diags := NewCostAlertsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCostAlertsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CostAlertsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCostAlertsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCostAlertsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCostAlertsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCostAlertsValueMust(CostAlertsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CostAlertsType) ValueType(ctx context.Context) attr.Value {
	return CostAlertsValue{}
}

var _ basetypes.ObjectValuable = CostAlertsValue{}

type CostAlertsValue struct {
	CreatedAt       basetypes.StringValue `tfsdk:"created_at"`
	EmailRecipients basetypes.ListValue   `tfsdk:"email_recipients"`
	Id              basetypes.StringValue `tfsdk:"id"`
	Interval        basetypes.StringValue `tfsdk:"interval"`
	ReportTokens    basetypes.ListValue   `tfsdk:"report_tokens"`
	SlackChannels   basetypes.ListValue   `tfsdk:"slack_channels"`
	TeamsChannels   basetypes.ListValue   `tfsdk:"teams_channels"`
	Threshold       basetypes.NumberValue `tfsdk:"threshold"`
	Title           basetypes.StringValue `tfsdk:"title"`
	Token           basetypes.StringValue `tfsdk:"token"`
	UnitType        basetypes.StringValue `tfsdk:"unit_type"`
	UpdatedAt       basetypes.StringValue `tfsdk:"updated_at"`
	WorkspaceToken  basetypes.StringValue `tfsdk:"workspace_token"`
	state           attr.ValueState
}

func (v CostAlertsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 13)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_recipients"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interval"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["report_tokens"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["slack_channels"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["teams_channels"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["threshold"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["unit_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["workspace_token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 13)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.EmailRecipients.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_recipients"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Interval.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval"] = val

		val, err = v.ReportTokens.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["report_tokens"] = val

		val, err = v.SlackChannels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slack_channels"] = val

		val, err = v.TeamsChannels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["teams_channels"] = val

		val, err = v.Threshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["threshold"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.UnitType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["unit_type"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.WorkspaceToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["workspace_token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CostAlertsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CostAlertsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CostAlertsValue) String() string {
	return "CostAlertsValue"
}

func (v CostAlertsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	emailRecipientsVal, d := types.ListValue(types.StringType, v.EmailRecipients.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_at": basetypes.StringType{},
			"email_recipients": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":       basetypes.StringType{},
			"interval": basetypes.StringType{},
			"report_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"slack_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"threshold":       basetypes.NumberType{},
			"title":           basetypes.StringType{},
			"token":           basetypes.StringType{},
			"unit_type":       basetypes.StringType{},
			"updated_at":      basetypes.StringType{},
			"workspace_token": basetypes.StringType{},
		}), diags
	}

	reportTokensVal, d := types.ListValue(types.StringType, v.ReportTokens.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_at": basetypes.StringType{},
			"email_recipients": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":       basetypes.StringType{},
			"interval": basetypes.StringType{},
			"report_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"slack_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"threshold":       basetypes.NumberType{},
			"title":           basetypes.StringType{},
			"token":           basetypes.StringType{},
			"unit_type":       basetypes.StringType{},
			"updated_at":      basetypes.StringType{},
			"workspace_token": basetypes.StringType{},
		}), diags
	}

	slackChannelsVal, d := types.ListValue(types.StringType, v.SlackChannels.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_at": basetypes.StringType{},
			"email_recipients": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":       basetypes.StringType{},
			"interval": basetypes.StringType{},
			"report_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"slack_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"threshold":       basetypes.NumberType{},
			"title":           basetypes.StringType{},
			"token":           basetypes.StringType{},
			"unit_type":       basetypes.StringType{},
			"updated_at":      basetypes.StringType{},
			"workspace_token": basetypes.StringType{},
		}), diags
	}

	teamsChannelsVal, d := types.ListValue(types.StringType, v.TeamsChannels.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_at": basetypes.StringType{},
			"email_recipients": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":       basetypes.StringType{},
			"interval": basetypes.StringType{},
			"report_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"slack_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"threshold":       basetypes.NumberType{},
			"title":           basetypes.StringType{},
			"token":           basetypes.StringType{},
			"unit_type":       basetypes.StringType{},
			"updated_at":      basetypes.StringType{},
			"workspace_token": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"created_at": basetypes.StringType{},
			"email_recipients": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":       basetypes.StringType{},
			"interval": basetypes.StringType{},
			"report_tokens": basetypes.ListType{
				ElemType: types.StringType,
			},
			"slack_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams_channels": basetypes.ListType{
				ElemType: types.StringType,
			},
			"threshold":       basetypes.NumberType{},
			"title":           basetypes.StringType{},
			"token":           basetypes.StringType{},
			"unit_type":       basetypes.StringType{},
			"updated_at":      basetypes.StringType{},
			"workspace_token": basetypes.StringType{},
		},
		map[string]attr.Value{
			"created_at":       v.CreatedAt,
			"email_recipients": emailRecipientsVal,
			"id":               v.Id,
			"interval":         v.Interval,
			"report_tokens":    reportTokensVal,
			"slack_channels":   slackChannelsVal,
			"teams_channels":   teamsChannelsVal,
			"threshold":        v.Threshold,
			"title":            v.Title,
			"token":            v.Token,
			"unit_type":        v.UnitType,
			"updated_at":       v.UpdatedAt,
			"workspace_token":  v.WorkspaceToken,
		})

	return objVal, diags
}

func (v CostAlertsValue) Equal(o attr.Value) bool {
	other, ok := o.(CostAlertsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.EmailRecipients.Equal(other.EmailRecipients) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Interval.Equal(other.Interval) {
		return false
	}

	if !v.ReportTokens.Equal(other.ReportTokens) {
		return false
	}

	if !v.SlackChannels.Equal(other.SlackChannels) {
		return false
	}

	if !v.TeamsChannels.Equal(other.TeamsChannels) {
		return false
	}

	if !v.Threshold.Equal(other.Threshold) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.UnitType.Equal(other.UnitType) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.WorkspaceToken.Equal(other.WorkspaceToken) {
		return false
	}

	return true
}

func (v CostAlertsValue) Type(ctx context.Context) attr.Type {
	return CostAlertsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CostAlertsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at": basetypes.StringType{},
		"email_recipients": basetypes.ListType{
			ElemType: types.StringType,
		},
		"id":       basetypes.StringType{},
		"interval": basetypes.StringType{},
		"report_tokens": basetypes.ListType{
			ElemType: types.StringType,
		},
		"slack_channels": basetypes.ListType{
			ElemType: types.StringType,
		},
		"teams_channels": basetypes.ListType{
			ElemType: types.StringType,
		},
		"threshold":       basetypes.NumberType{},
		"title":           basetypes.StringType{},
		"token":           basetypes.StringType{},
		"unit_type":       basetypes.StringType{},
		"updated_at":      basetypes.StringType{},
		"workspace_token": basetypes.StringType{},
	}
}
