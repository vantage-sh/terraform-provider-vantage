// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_billing_rules

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func BillingRulesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"billing_rules": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"amount": schema.StringAttribute{
							Computed:            true,
							Description:         "The amount for the BillingRule (Charge).",
							MarkdownDescription: "The amount for the BillingRule (Charge).",
						},
						"apply_to_all": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether the BillingRule applies to all future managed accounts.",
							MarkdownDescription: "Whether the BillingRule applies to all future managed accounts.",
						},
						"category": schema.StringAttribute{
							Computed:            true,
							Description:         "The category for the BillingRule (Charge).",
							MarkdownDescription: "The category for the BillingRule (Charge).",
						},
						"charge_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The charge type for the BillingRule.",
							MarkdownDescription: "The charge type for the BillingRule.",
						},
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time, in UTC, the BillingRule was created. ISO 8601 Formatted.",
							MarkdownDescription: "The date and time, in UTC, the BillingRule was created. ISO 8601 Formatted.",
						},
						"created_by_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The token of the Creator of the BillingRule.",
							MarkdownDescription: "The token of the Creator of the BillingRule.",
						},
						"end_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The end date of the BillingRule.",
							MarkdownDescription: "The end date of the BillingRule.",
						},
						"percentage": schema.StringAttribute{
							Computed:            true,
							Description:         "The percentage of the cost shown for the BillingRule (Adjustment).",
							MarkdownDescription: "The percentage of the cost shown for the BillingRule (Adjustment).",
						},
						"service": schema.StringAttribute{
							Computed:            true,
							Description:         "The service for the BillingRule (Charge).",
							MarkdownDescription: "The service for the BillingRule (Charge).",
						},
						"start_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The start date of the BillingRule.",
							MarkdownDescription: "The start date of the BillingRule.",
						},
						"start_period": schema.StringAttribute{
							Computed:            true,
							Description:         "The start period for the BillingRule (Charge).",
							MarkdownDescription: "The start period for the BillingRule (Charge).",
						},
						"sub_category": schema.StringAttribute{
							Computed:            true,
							Description:         "The subcategory for the BillingRule (Charge).",
							MarkdownDescription: "The subcategory for the BillingRule (Charge).",
						},
						"title": schema.StringAttribute{
							Computed:            true,
							Description:         "The title of the BillingRule.",
							MarkdownDescription: "The title of the BillingRule.",
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of the BillingRule.",
							MarkdownDescription: "The type of the BillingRule.",
						},
					},
					CustomType: BillingRulesType{
						ObjectType: types.ObjectType{
							AttrTypes: BillingRulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type BillingRulesModel struct {
	BillingRules types.List `tfsdk:"billing_rules"`
}

var _ basetypes.ObjectTypable = BillingRulesType{}

type BillingRulesType struct {
	basetypes.ObjectType
}

func (t BillingRulesType) Equal(o attr.Type) bool {
	other, ok := o.(BillingRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BillingRulesType) String() string {
	return "BillingRulesType"
}

func (t BillingRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return nil, diags
	}

	amountVal, ok := amountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.StringValue, was: %T`, amountAttribute))
	}

	applyToAllAttribute, ok := attributes["apply_to_all"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`apply_to_all is missing from object`)

		return nil, diags
	}

	applyToAllVal, ok := applyToAllAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`apply_to_all expected to be basetypes.BoolValue, was: %T`, applyToAllAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return nil, diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	chargeTypeAttribute, ok := attributes["charge_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`charge_type is missing from object`)

		return nil, diags
	}

	chargeTypeVal, ok := chargeTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`charge_type expected to be basetypes.StringValue, was: %T`, chargeTypeAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByTokenAttribute, ok := attributes["created_by_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_token is missing from object`)

		return nil, diags
	}

	createdByTokenVal, ok := createdByTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_token expected to be basetypes.StringValue, was: %T`, createdByTokenAttribute))
	}

	endDateAttribute, ok := attributes["end_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_date is missing from object`)

		return nil, diags
	}

	endDateVal, ok := endDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_date expected to be basetypes.StringValue, was: %T`, endDateAttribute))
	}

	percentageAttribute, ok := attributes["percentage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`percentage is missing from object`)

		return nil, diags
	}

	percentageVal, ok := percentageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`percentage expected to be basetypes.StringValue, was: %T`, percentageAttribute))
	}

	serviceAttribute, ok := attributes["service"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service is missing from object`)

		return nil, diags
	}

	serviceVal, ok := serviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service expected to be basetypes.StringValue, was: %T`, serviceAttribute))
	}

	startDateAttribute, ok := attributes["start_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_date is missing from object`)

		return nil, diags
	}

	startDateVal, ok := startDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_date expected to be basetypes.StringValue, was: %T`, startDateAttribute))
	}

	startPeriodAttribute, ok := attributes["start_period"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_period is missing from object`)

		return nil, diags
	}

	startPeriodVal, ok := startPeriodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_period expected to be basetypes.StringValue, was: %T`, startPeriodAttribute))
	}

	subCategoryAttribute, ok := attributes["sub_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub_category is missing from object`)

		return nil, diags
	}

	subCategoryVal, ok := subCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub_category expected to be basetypes.StringValue, was: %T`, subCategoryAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BillingRulesValue{
		Amount:           amountVal,
		ApplyToAll:       applyToAllVal,
		Category:         categoryVal,
		ChargeType:       chargeTypeVal,
		CreatedAt:        createdAtVal,
		CreatedByToken:   createdByTokenVal,
		EndDate:          endDateVal,
		Percentage:       percentageVal,
		Service:          serviceVal,
		StartDate:        startDateVal,
		StartPeriod:      startPeriodVal,
		SubCategory:      subCategoryVal,
		Title:            titleVal,
		Token:            tokenVal,
		BillingRulesType: typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewBillingRulesValueNull() BillingRulesValue {
	return BillingRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewBillingRulesValueUnknown() BillingRulesValue {
	return BillingRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBillingRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BillingRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BillingRulesValue Attribute Value",
				"While creating a BillingRulesValue value, a missing attribute value was detected. "+
					"A BillingRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BillingRulesValue Attribute Type",
				"While creating a BillingRulesValue value, an invalid attribute value was detected. "+
					"A BillingRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BillingRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BillingRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BillingRulesValue Attribute Value",
				"While creating a BillingRulesValue value, an extra attribute value was detected. "+
					"A BillingRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BillingRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBillingRulesValueUnknown(), diags
	}

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	amountVal, ok := amountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.StringValue, was: %T`, amountAttribute))
	}

	applyToAllAttribute, ok := attributes["apply_to_all"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`apply_to_all is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	applyToAllVal, ok := applyToAllAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`apply_to_all expected to be basetypes.BoolValue, was: %T`, applyToAllAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	chargeTypeAttribute, ok := attributes["charge_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`charge_type is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	chargeTypeVal, ok := chargeTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`charge_type expected to be basetypes.StringValue, was: %T`, chargeTypeAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByTokenAttribute, ok := attributes["created_by_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_token is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	createdByTokenVal, ok := createdByTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_token expected to be basetypes.StringValue, was: %T`, createdByTokenAttribute))
	}

	endDateAttribute, ok := attributes["end_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_date is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	endDateVal, ok := endDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_date expected to be basetypes.StringValue, was: %T`, endDateAttribute))
	}

	percentageAttribute, ok := attributes["percentage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`percentage is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	percentageVal, ok := percentageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`percentage expected to be basetypes.StringValue, was: %T`, percentageAttribute))
	}

	serviceAttribute, ok := attributes["service"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	serviceVal, ok := serviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service expected to be basetypes.StringValue, was: %T`, serviceAttribute))
	}

	startDateAttribute, ok := attributes["start_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_date is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	startDateVal, ok := startDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_date expected to be basetypes.StringValue, was: %T`, startDateAttribute))
	}

	startPeriodAttribute, ok := attributes["start_period"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_period is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	startPeriodVal, ok := startPeriodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_period expected to be basetypes.StringValue, was: %T`, startPeriodAttribute))
	}

	subCategoryAttribute, ok := attributes["sub_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub_category is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	subCategoryVal, ok := subCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub_category expected to be basetypes.StringValue, was: %T`, subCategoryAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewBillingRulesValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewBillingRulesValueUnknown(), diags
	}

	return BillingRulesValue{
		Amount:           amountVal,
		ApplyToAll:       applyToAllVal,
		Category:         categoryVal,
		ChargeType:       chargeTypeVal,
		CreatedAt:        createdAtVal,
		CreatedByToken:   createdByTokenVal,
		EndDate:          endDateVal,
		Percentage:       percentageVal,
		Service:          serviceVal,
		StartDate:        startDateVal,
		StartPeriod:      startPeriodVal,
		SubCategory:      subCategoryVal,
		Title:            titleVal,
		Token:            tokenVal,
		BillingRulesType: typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewBillingRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BillingRulesValue {
	object, diags := NewBillingRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBillingRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BillingRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBillingRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBillingRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBillingRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBillingRulesValueMust(BillingRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BillingRulesType) ValueType(ctx context.Context) attr.Value {
	return BillingRulesValue{}
}

var _ basetypes.ObjectValuable = BillingRulesValue{}

type BillingRulesValue struct {
	Amount           basetypes.StringValue `tfsdk:"amount"`
	ApplyToAll       basetypes.BoolValue   `tfsdk:"apply_to_all"`
	Category         basetypes.StringValue `tfsdk:"category"`
	ChargeType       basetypes.StringValue `tfsdk:"charge_type"`
	CreatedAt        basetypes.StringValue `tfsdk:"created_at"`
	CreatedByToken   basetypes.StringValue `tfsdk:"created_by_token"`
	EndDate          basetypes.StringValue `tfsdk:"end_date"`
	Percentage       basetypes.StringValue `tfsdk:"percentage"`
	Service          basetypes.StringValue `tfsdk:"service"`
	StartDate        basetypes.StringValue `tfsdk:"start_date"`
	StartPeriod      basetypes.StringValue `tfsdk:"start_period"`
	SubCategory      basetypes.StringValue `tfsdk:"sub_category"`
	Title            basetypes.StringValue `tfsdk:"title"`
	Token            basetypes.StringValue `tfsdk:"token"`
	BillingRulesType basetypes.StringValue `tfsdk:"type"`
	state            attr.ValueState
}

func (v BillingRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 15)

	var val tftypes.Value
	var err error

	attrTypes["amount"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["apply_to_all"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["charge_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["end_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["percentage"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["service"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["start_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["start_period"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sub_category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 15)

		val, err = v.Amount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount"] = val

		val, err = v.ApplyToAll.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["apply_to_all"] = val

		val, err = v.Category.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category"] = val

		val, err = v.ChargeType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["charge_type"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CreatedByToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by_token"] = val

		val, err = v.EndDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end_date"] = val

		val, err = v.Percentage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["percentage"] = val

		val, err = v.Service.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service"] = val

		val, err = v.StartDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_date"] = val

		val, err = v.StartPeriod.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_period"] = val

		val, err = v.SubCategory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sub_category"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.BillingRulesType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BillingRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BillingRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BillingRulesValue) String() string {
	return "BillingRulesValue"
}

func (v BillingRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"amount":           basetypes.StringType{},
			"apply_to_all":     basetypes.BoolType{},
			"category":         basetypes.StringType{},
			"charge_type":      basetypes.StringType{},
			"created_at":       basetypes.StringType{},
			"created_by_token": basetypes.StringType{},
			"end_date":         basetypes.StringType{},
			"percentage":       basetypes.StringType{},
			"service":          basetypes.StringType{},
			"start_date":       basetypes.StringType{},
			"start_period":     basetypes.StringType{},
			"sub_category":     basetypes.StringType{},
			"title":            basetypes.StringType{},
			"token":            basetypes.StringType{},
			"type":             basetypes.StringType{},
		},
		map[string]attr.Value{
			"amount":           v.Amount,
			"apply_to_all":     v.ApplyToAll,
			"category":         v.Category,
			"charge_type":      v.ChargeType,
			"created_at":       v.CreatedAt,
			"created_by_token": v.CreatedByToken,
			"end_date":         v.EndDate,
			"percentage":       v.Percentage,
			"service":          v.Service,
			"start_date":       v.StartDate,
			"start_period":     v.StartPeriod,
			"sub_category":     v.SubCategory,
			"title":            v.Title,
			"token":            v.Token,
			"type":             v.BillingRulesType,
		})

	return objVal, diags
}

func (v BillingRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(BillingRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Amount.Equal(other.Amount) {
		return false
	}

	if !v.ApplyToAll.Equal(other.ApplyToAll) {
		return false
	}

	if !v.Category.Equal(other.Category) {
		return false
	}

	if !v.ChargeType.Equal(other.ChargeType) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CreatedByToken.Equal(other.CreatedByToken) {
		return false
	}

	if !v.EndDate.Equal(other.EndDate) {
		return false
	}

	if !v.Percentage.Equal(other.Percentage) {
		return false
	}

	if !v.Service.Equal(other.Service) {
		return false
	}

	if !v.StartDate.Equal(other.StartDate) {
		return false
	}

	if !v.StartPeriod.Equal(other.StartPeriod) {
		return false
	}

	if !v.SubCategory.Equal(other.SubCategory) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.BillingRulesType.Equal(other.BillingRulesType) {
		return false
	}

	return true
}

func (v BillingRulesValue) Type(ctx context.Context) attr.Type {
	return BillingRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BillingRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"amount":           basetypes.StringType{},
		"apply_to_all":     basetypes.BoolType{},
		"category":         basetypes.StringType{},
		"charge_type":      basetypes.StringType{},
		"created_at":       basetypes.StringType{},
		"created_by_token": basetypes.StringType{},
		"end_date":         basetypes.StringType{},
		"percentage":       basetypes.StringType{},
		"service":          basetypes.StringType{},
		"start_date":       basetypes.StringType{},
		"start_period":     basetypes.StringType{},
		"sub_category":     basetypes.StringType{},
		"title":            basetypes.StringType{},
		"token":            basetypes.StringType{},
		"type":             basetypes.StringType{},
	}
}
